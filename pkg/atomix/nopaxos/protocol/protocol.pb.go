// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/nopaxos/protocol/protocol.proto

package protocol

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	// Types that are valid to be assigned to Message:
	//	*Message_Command
	//	*Message_CommandReply
	//	*Message_Query
	//	*Message_QueryReply
	//	*Message_SlotLookup
	//	*Message_GapCommit
	//	*Message_GapCommitReply
	//	*Message_ViewChangeRequest
	//	*Message_ViewChange
	//	*Message_StartView
	//	*Message_SyncPrepare
	//	*Message_SyncReply
	//	*Message_SyncCommit
	Message isMessage_Message `protobuf_oneof:"message"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

type isMessage_Message interface {
	isMessage_Message()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Message_Command struct {
	Command *CommandRequest `protobuf:"bytes,1,opt,name=command,proto3,oneof" json:"command,omitempty"`
}
type Message_CommandReply struct {
	CommandReply *CommandReply `protobuf:"bytes,2,opt,name=command_reply,json=commandReply,proto3,oneof" json:"command_reply,omitempty"`
}
type Message_Query struct {
	Query *QueryRequest `protobuf:"bytes,3,opt,name=query,proto3,oneof" json:"query,omitempty"`
}
type Message_QueryReply struct {
	QueryReply *QueryReply `protobuf:"bytes,4,opt,name=query_reply,json=queryReply,proto3,oneof" json:"query_reply,omitempty"`
}
type Message_SlotLookup struct {
	SlotLookup *SlotLookup `protobuf:"bytes,5,opt,name=slot_lookup,json=slotLookup,proto3,oneof" json:"slot_lookup,omitempty"`
}
type Message_GapCommit struct {
	GapCommit *GapCommitRequest `protobuf:"bytes,6,opt,name=gap_commit,json=gapCommit,proto3,oneof" json:"gap_commit,omitempty"`
}
type Message_GapCommitReply struct {
	GapCommitReply *GapCommitReply `protobuf:"bytes,7,opt,name=gap_commit_reply,json=gapCommitReply,proto3,oneof" json:"gap_commit_reply,omitempty"`
}
type Message_ViewChangeRequest struct {
	ViewChangeRequest *ViewChangeRequest `protobuf:"bytes,8,opt,name=view_change_request,json=viewChangeRequest,proto3,oneof" json:"view_change_request,omitempty"`
}
type Message_ViewChange struct {
	ViewChange *ViewChange `protobuf:"bytes,9,opt,name=view_change,json=viewChange,proto3,oneof" json:"view_change,omitempty"`
}
type Message_StartView struct {
	StartView *StartView `protobuf:"bytes,10,opt,name=start_view,json=startView,proto3,oneof" json:"start_view,omitempty"`
}
type Message_SyncPrepare struct {
	SyncPrepare *SyncPrepare `protobuf:"bytes,11,opt,name=sync_prepare,json=syncPrepare,proto3,oneof" json:"sync_prepare,omitempty"`
}
type Message_SyncReply struct {
	SyncReply *SyncReply `protobuf:"bytes,12,opt,name=sync_reply,json=syncReply,proto3,oneof" json:"sync_reply,omitempty"`
}
type Message_SyncCommit struct {
	SyncCommit *SyncCommit `protobuf:"bytes,13,opt,name=sync_commit,json=syncCommit,proto3,oneof" json:"sync_commit,omitempty"`
}

func (*Message_Command) isMessage_Message()           {}
func (*Message_CommandReply) isMessage_Message()      {}
func (*Message_Query) isMessage_Message()             {}
func (*Message_QueryReply) isMessage_Message()        {}
func (*Message_SlotLookup) isMessage_Message()        {}
func (*Message_GapCommit) isMessage_Message()         {}
func (*Message_GapCommitReply) isMessage_Message()    {}
func (*Message_ViewChangeRequest) isMessage_Message() {}
func (*Message_ViewChange) isMessage_Message()        {}
func (*Message_StartView) isMessage_Message()         {}
func (*Message_SyncPrepare) isMessage_Message()       {}
func (*Message_SyncReply) isMessage_Message()         {}
func (*Message_SyncCommit) isMessage_Message()        {}

func (m *Message) GetMessage() isMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Message) GetCommand() *CommandRequest {
	if x, ok := m.GetMessage().(*Message_Command); ok {
		return x.Command
	}
	return nil
}

func (m *Message) GetCommandReply() *CommandReply {
	if x, ok := m.GetMessage().(*Message_CommandReply); ok {
		return x.CommandReply
	}
	return nil
}

func (m *Message) GetQuery() *QueryRequest {
	if x, ok := m.GetMessage().(*Message_Query); ok {
		return x.Query
	}
	return nil
}

func (m *Message) GetQueryReply() *QueryReply {
	if x, ok := m.GetMessage().(*Message_QueryReply); ok {
		return x.QueryReply
	}
	return nil
}

func (m *Message) GetSlotLookup() *SlotLookup {
	if x, ok := m.GetMessage().(*Message_SlotLookup); ok {
		return x.SlotLookup
	}
	return nil
}

func (m *Message) GetGapCommit() *GapCommitRequest {
	if x, ok := m.GetMessage().(*Message_GapCommit); ok {
		return x.GapCommit
	}
	return nil
}

func (m *Message) GetGapCommitReply() *GapCommitReply {
	if x, ok := m.GetMessage().(*Message_GapCommitReply); ok {
		return x.GapCommitReply
	}
	return nil
}

func (m *Message) GetViewChangeRequest() *ViewChangeRequest {
	if x, ok := m.GetMessage().(*Message_ViewChangeRequest); ok {
		return x.ViewChangeRequest
	}
	return nil
}

func (m *Message) GetViewChange() *ViewChange {
	if x, ok := m.GetMessage().(*Message_ViewChange); ok {
		return x.ViewChange
	}
	return nil
}

func (m *Message) GetStartView() *StartView {
	if x, ok := m.GetMessage().(*Message_StartView); ok {
		return x.StartView
	}
	return nil
}

func (m *Message) GetSyncPrepare() *SyncPrepare {
	if x, ok := m.GetMessage().(*Message_SyncPrepare); ok {
		return x.SyncPrepare
	}
	return nil
}

func (m *Message) GetSyncReply() *SyncReply {
	if x, ok := m.GetMessage().(*Message_SyncReply); ok {
		return x.SyncReply
	}
	return nil
}

func (m *Message) GetSyncCommit() *SyncCommit {
	if x, ok := m.GetMessage().(*Message_SyncCommit); ok {
		return x.SyncCommit
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Message) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Message_Command)(nil),
		(*Message_CommandReply)(nil),
		(*Message_Query)(nil),
		(*Message_QueryReply)(nil),
		(*Message_SlotLookup)(nil),
		(*Message_GapCommit)(nil),
		(*Message_GapCommitReply)(nil),
		(*Message_ViewChangeRequest)(nil),
		(*Message_ViewChange)(nil),
		(*Message_StartView)(nil),
		(*Message_SyncPrepare)(nil),
		(*Message_SyncReply)(nil),
		(*Message_SyncCommit)(nil),
	}
}

type ViewId struct {
	LeaderId  LeaderID  `protobuf:"bytes,1,opt,name=leader_id,json=leaderId,proto3,casttype=LeaderID" json:"leader_id,omitempty"`
	SessionId SessionID `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3,casttype=SessionID" json:"session_id,omitempty"`
}

func (m *ViewId) Reset()         { *m = ViewId{} }
func (m *ViewId) String() string { return proto.CompactTextString(m) }
func (*ViewId) ProtoMessage()    {}
func (*ViewId) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{1}
}
func (m *ViewId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewId.Merge(m, src)
}
func (m *ViewId) XXX_Size() int {
	return m.Size()
}
func (m *ViewId) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewId.DiscardUnknown(m)
}

var xxx_messageInfo_ViewId proto.InternalMessageInfo

func (m *ViewId) GetLeaderId() LeaderID {
	if m != nil {
		return m.LeaderId
	}
	return ""
}

func (m *ViewId) GetSessionId() SessionID {
	if m != nil {
		return m.SessionId
	}
	return 0
}

type CommandRequest struct {
	SessionId SessionID `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3,casttype=SessionID" json:"session_id,omitempty"`
	MessageId MessageID `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3,casttype=MessageID" json:"message_id,omitempty"`
	Value     []byte    `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CommandRequest) Reset()         { *m = CommandRequest{} }
func (m *CommandRequest) String() string { return proto.CompactTextString(m) }
func (*CommandRequest) ProtoMessage()    {}
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{2}
}
func (m *CommandRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandRequest.Merge(m, src)
}
func (m *CommandRequest) XXX_Size() int {
	return m.Size()
}
func (m *CommandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommandRequest proto.InternalMessageInfo

func (m *CommandRequest) GetSessionId() SessionID {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *CommandRequest) GetMessageId() MessageID {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *CommandRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type CommandReply struct {
	SenderId MemberID  `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3,casttype=MemberID" json:"sender_id,omitempty"`
	ViewId   *ViewId   `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	SlotId   LogSlotID `protobuf:"varint,3,opt,name=slot_id,json=slotId,proto3,casttype=LogSlotID" json:"slot_id,omitempty"`
	Value    []byte    `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CommandReply) Reset()         { *m = CommandReply{} }
func (m *CommandReply) String() string { return proto.CompactTextString(m) }
func (*CommandReply) ProtoMessage()    {}
func (*CommandReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{3}
}
func (m *CommandReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandReply.Merge(m, src)
}
func (m *CommandReply) XXX_Size() int {
	return m.Size()
}
func (m *CommandReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandReply.DiscardUnknown(m)
}

var xxx_messageInfo_CommandReply proto.InternalMessageInfo

func (m *CommandReply) GetSenderId() MemberID {
	if m != nil {
		return m.SenderId
	}
	return ""
}

func (m *CommandReply) GetViewId() *ViewId {
	if m != nil {
		return m.ViewId
	}
	return nil
}

func (m *CommandReply) GetSlotId() LogSlotID {
	if m != nil {
		return m.SlotId
	}
	return 0
}

func (m *CommandReply) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type QueryRequest struct {
	SessionId SessionID `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3,casttype=SessionID" json:"session_id,omitempty"`
	Value     []byte    `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *QueryRequest) Reset()         { *m = QueryRequest{} }
func (m *QueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()    {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{4}
}
func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(m, src)
}
func (m *QueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetSessionId() SessionID {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *QueryRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type QueryReply struct {
	SenderId MemberID `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3,casttype=MemberID" json:"sender_id,omitempty"`
	ViewId   *ViewId  `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	Value    []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *QueryReply) Reset()         { *m = QueryReply{} }
func (m *QueryReply) String() string { return proto.CompactTextString(m) }
func (*QueryReply) ProtoMessage()    {}
func (*QueryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{5}
}
func (m *QueryReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReply.Merge(m, src)
}
func (m *QueryReply) XXX_Size() int {
	return m.Size()
}
func (m *QueryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReply.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReply proto.InternalMessageInfo

func (m *QueryReply) GetSenderId() MemberID {
	if m != nil {
		return m.SenderId
	}
	return ""
}

func (m *QueryReply) GetViewId() *ViewId {
	if m != nil {
		return m.ViewId
	}
	return nil
}

func (m *QueryReply) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type SlotLookup struct {
	SenderId  MemberID  `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3,casttype=MemberID" json:"sender_id,omitempty"`
	ViewId    *ViewId   `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	MessageId MessageID `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3,casttype=MessageID" json:"message_id,omitempty"`
}

func (m *SlotLookup) Reset()         { *m = SlotLookup{} }
func (m *SlotLookup) String() string { return proto.CompactTextString(m) }
func (*SlotLookup) ProtoMessage()    {}
func (*SlotLookup) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{6}
}
func (m *SlotLookup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlotLookup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlotLookup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlotLookup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlotLookup.Merge(m, src)
}
func (m *SlotLookup) XXX_Size() int {
	return m.Size()
}
func (m *SlotLookup) XXX_DiscardUnknown() {
	xxx_messageInfo_SlotLookup.DiscardUnknown(m)
}

var xxx_messageInfo_SlotLookup proto.InternalMessageInfo

func (m *SlotLookup) GetSenderId() MemberID {
	if m != nil {
		return m.SenderId
	}
	return ""
}

func (m *SlotLookup) GetViewId() *ViewId {
	if m != nil {
		return m.ViewId
	}
	return nil
}

func (m *SlotLookup) GetMessageId() MessageID {
	if m != nil {
		return m.MessageId
	}
	return 0
}

type GapCommitRequest struct {
	ViewId *ViewId   `protobuf:"bytes,1,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	SlotId LogSlotID `protobuf:"varint,2,opt,name=slot_id,json=slotId,proto3,casttype=LogSlotID" json:"slot_id,omitempty"`
}

func (m *GapCommitRequest) Reset()         { *m = GapCommitRequest{} }
func (m *GapCommitRequest) String() string { return proto.CompactTextString(m) }
func (*GapCommitRequest) ProtoMessage()    {}
func (*GapCommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{7}
}
func (m *GapCommitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GapCommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GapCommitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GapCommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GapCommitRequest.Merge(m, src)
}
func (m *GapCommitRequest) XXX_Size() int {
	return m.Size()
}
func (m *GapCommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GapCommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GapCommitRequest proto.InternalMessageInfo

func (m *GapCommitRequest) GetViewId() *ViewId {
	if m != nil {
		return m.ViewId
	}
	return nil
}

func (m *GapCommitRequest) GetSlotId() LogSlotID {
	if m != nil {
		return m.SlotId
	}
	return 0
}

type GapCommitReply struct {
	SenderId MemberID  `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3,casttype=MemberID" json:"sender_id,omitempty"`
	ViewId   *ViewId   `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	SlotId   LogSlotID `protobuf:"varint,3,opt,name=slot_id,json=slotId,proto3,casttype=LogSlotID" json:"slot_id,omitempty"`
}

func (m *GapCommitReply) Reset()         { *m = GapCommitReply{} }
func (m *GapCommitReply) String() string { return proto.CompactTextString(m) }
func (*GapCommitReply) ProtoMessage()    {}
func (*GapCommitReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{8}
}
func (m *GapCommitReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GapCommitReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GapCommitReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GapCommitReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GapCommitReply.Merge(m, src)
}
func (m *GapCommitReply) XXX_Size() int {
	return m.Size()
}
func (m *GapCommitReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GapCommitReply.DiscardUnknown(m)
}

var xxx_messageInfo_GapCommitReply proto.InternalMessageInfo

func (m *GapCommitReply) GetSenderId() MemberID {
	if m != nil {
		return m.SenderId
	}
	return ""
}

func (m *GapCommitReply) GetViewId() *ViewId {
	if m != nil {
		return m.ViewId
	}
	return nil
}

func (m *GapCommitReply) GetSlotId() LogSlotID {
	if m != nil {
		return m.SlotId
	}
	return 0
}

type ViewChangeRequest struct {
	ViewId *ViewId `protobuf:"bytes,1,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
}

func (m *ViewChangeRequest) Reset()         { *m = ViewChangeRequest{} }
func (m *ViewChangeRequest) String() string { return proto.CompactTextString(m) }
func (*ViewChangeRequest) ProtoMessage()    {}
func (*ViewChangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{9}
}
func (m *ViewChangeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewChangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewChangeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewChangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewChangeRequest.Merge(m, src)
}
func (m *ViewChangeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ViewChangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewChangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ViewChangeRequest proto.InternalMessageInfo

func (m *ViewChangeRequest) GetViewId() *ViewId {
	if m != nil {
		return m.ViewId
	}
	return nil
}

type ViewChange struct {
	MemberId   MemberID    `protobuf:"bytes,1,opt,name=member_id,json=memberId,proto3,casttype=MemberID" json:"member_id,omitempty"`
	ViewId     *ViewId     `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	LastNormal *ViewId     `protobuf:"bytes,3,opt,name=last_normal,json=lastNormal,proto3" json:"last_normal,omitempty"`
	MessageId  MessageID   `protobuf:"varint,4,opt,name=message_id,json=messageId,proto3,casttype=MessageID" json:"message_id,omitempty"`
	Log        []*LogEntry `protobuf:"bytes,5,rep,name=log,proto3" json:"log,omitempty"`
}

func (m *ViewChange) Reset()         { *m = ViewChange{} }
func (m *ViewChange) String() string { return proto.CompactTextString(m) }
func (*ViewChange) ProtoMessage()    {}
func (*ViewChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{10}
}
func (m *ViewChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewChange.Merge(m, src)
}
func (m *ViewChange) XXX_Size() int {
	return m.Size()
}
func (m *ViewChange) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewChange.DiscardUnknown(m)
}

var xxx_messageInfo_ViewChange proto.InternalMessageInfo

func (m *ViewChange) GetMemberId() MemberID {
	if m != nil {
		return m.MemberId
	}
	return ""
}

func (m *ViewChange) GetViewId() *ViewId {
	if m != nil {
		return m.ViewId
	}
	return nil
}

func (m *ViewChange) GetLastNormal() *ViewId {
	if m != nil {
		return m.LastNormal
	}
	return nil
}

func (m *ViewChange) GetMessageId() MessageID {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *ViewChange) GetLog() []*LogEntry {
	if m != nil {
		return m.Log
	}
	return nil
}

type StartView struct {
	ViewId    *ViewId     `protobuf:"bytes,1,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	MessageId MessageID   `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3,casttype=MessageID" json:"message_id,omitempty"`
	Log       []*LogEntry `protobuf:"bytes,3,rep,name=log,proto3" json:"log,omitempty"`
}

func (m *StartView) Reset()         { *m = StartView{} }
func (m *StartView) String() string { return proto.CompactTextString(m) }
func (*StartView) ProtoMessage()    {}
func (*StartView) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{11}
}
func (m *StartView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartView.Merge(m, src)
}
func (m *StartView) XXX_Size() int {
	return m.Size()
}
func (m *StartView) XXX_DiscardUnknown() {
	xxx_messageInfo_StartView.DiscardUnknown(m)
}

var xxx_messageInfo_StartView proto.InternalMessageInfo

func (m *StartView) GetViewId() *ViewId {
	if m != nil {
		return m.ViewId
	}
	return nil
}

func (m *StartView) GetMessageId() MessageID {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *StartView) GetLog() []*LogEntry {
	if m != nil {
		return m.Log
	}
	return nil
}

type SyncPrepare struct {
	SenderId  MemberID    `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3,casttype=MemberID" json:"sender_id,omitempty"`
	ViewId    *ViewId     `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	MessageId MessageID   `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3,casttype=MessageID" json:"message_id,omitempty"`
	Log       []*LogEntry `protobuf:"bytes,4,rep,name=log,proto3" json:"log,omitempty"`
}

func (m *SyncPrepare) Reset()         { *m = SyncPrepare{} }
func (m *SyncPrepare) String() string { return proto.CompactTextString(m) }
func (*SyncPrepare) ProtoMessage()    {}
func (*SyncPrepare) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{12}
}
func (m *SyncPrepare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncPrepare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncPrepare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncPrepare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncPrepare.Merge(m, src)
}
func (m *SyncPrepare) XXX_Size() int {
	return m.Size()
}
func (m *SyncPrepare) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncPrepare.DiscardUnknown(m)
}

var xxx_messageInfo_SyncPrepare proto.InternalMessageInfo

func (m *SyncPrepare) GetSenderId() MemberID {
	if m != nil {
		return m.SenderId
	}
	return ""
}

func (m *SyncPrepare) GetViewId() *ViewId {
	if m != nil {
		return m.ViewId
	}
	return nil
}

func (m *SyncPrepare) GetMessageId() MessageID {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *SyncPrepare) GetLog() []*LogEntry {
	if m != nil {
		return m.Log
	}
	return nil
}

type SyncReply struct {
	SenderId MemberID  `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3,casttype=MemberID" json:"sender_id,omitempty"`
	ViewId   *ViewId   `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	SlotId   LogSlotID `protobuf:"varint,3,opt,name=slot_id,json=slotId,proto3,casttype=LogSlotID" json:"slot_id,omitempty"`
}

func (m *SyncReply) Reset()         { *m = SyncReply{} }
func (m *SyncReply) String() string { return proto.CompactTextString(m) }
func (*SyncReply) ProtoMessage()    {}
func (*SyncReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{13}
}
func (m *SyncReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncReply.Merge(m, src)
}
func (m *SyncReply) XXX_Size() int {
	return m.Size()
}
func (m *SyncReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncReply.DiscardUnknown(m)
}

var xxx_messageInfo_SyncReply proto.InternalMessageInfo

func (m *SyncReply) GetSenderId() MemberID {
	if m != nil {
		return m.SenderId
	}
	return ""
}

func (m *SyncReply) GetViewId() *ViewId {
	if m != nil {
		return m.ViewId
	}
	return nil
}

func (m *SyncReply) GetSlotId() LogSlotID {
	if m != nil {
		return m.SlotId
	}
	return 0
}

type SyncCommit struct {
	SenderId  MemberID    `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3,casttype=MemberID" json:"sender_id,omitempty"`
	ViewId    *ViewId     `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	MessageId MessageID   `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3,casttype=MessageID" json:"message_id,omitempty"`
	Log       []*LogEntry `protobuf:"bytes,4,rep,name=log,proto3" json:"log,omitempty"`
}

func (m *SyncCommit) Reset()         { *m = SyncCommit{} }
func (m *SyncCommit) String() string { return proto.CompactTextString(m) }
func (*SyncCommit) ProtoMessage()    {}
func (*SyncCommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{14}
}
func (m *SyncCommit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncCommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncCommit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncCommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncCommit.Merge(m, src)
}
func (m *SyncCommit) XXX_Size() int {
	return m.Size()
}
func (m *SyncCommit) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncCommit.DiscardUnknown(m)
}

var xxx_messageInfo_SyncCommit proto.InternalMessageInfo

func (m *SyncCommit) GetSenderId() MemberID {
	if m != nil {
		return m.SenderId
	}
	return ""
}

func (m *SyncCommit) GetViewId() *ViewId {
	if m != nil {
		return m.ViewId
	}
	return nil
}

func (m *SyncCommit) GetMessageId() MessageID {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *SyncCommit) GetLog() []*LogEntry {
	if m != nil {
		return m.Log
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "atomix.nopaxos.protocol.Message")
	proto.RegisterType((*ViewId)(nil), "atomix.nopaxos.protocol.ViewId")
	proto.RegisterType((*CommandRequest)(nil), "atomix.nopaxos.protocol.CommandRequest")
	proto.RegisterType((*CommandReply)(nil), "atomix.nopaxos.protocol.CommandReply")
	proto.RegisterType((*QueryRequest)(nil), "atomix.nopaxos.protocol.QueryRequest")
	proto.RegisterType((*QueryReply)(nil), "atomix.nopaxos.protocol.QueryReply")
	proto.RegisterType((*SlotLookup)(nil), "atomix.nopaxos.protocol.SlotLookup")
	proto.RegisterType((*GapCommitRequest)(nil), "atomix.nopaxos.protocol.GapCommitRequest")
	proto.RegisterType((*GapCommitReply)(nil), "atomix.nopaxos.protocol.GapCommitReply")
	proto.RegisterType((*ViewChangeRequest)(nil), "atomix.nopaxos.protocol.ViewChangeRequest")
	proto.RegisterType((*ViewChange)(nil), "atomix.nopaxos.protocol.ViewChange")
	proto.RegisterType((*StartView)(nil), "atomix.nopaxos.protocol.StartView")
	proto.RegisterType((*SyncPrepare)(nil), "atomix.nopaxos.protocol.SyncPrepare")
	proto.RegisterType((*SyncReply)(nil), "atomix.nopaxos.protocol.SyncReply")
	proto.RegisterType((*SyncCommit)(nil), "atomix.nopaxos.protocol.SyncCommit")
}

func init() {
	proto.RegisterFile("atomix/nopaxos/protocol/protocol.proto", fileDescriptor_5bf22afbce485451)
}

var fileDescriptor_5bf22afbce485451 = []byte{
	// 895 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x96, 0x41, 0x6f, 0xdc, 0x44,
	0x14, 0xc7, 0x77, 0xb2, 0x9b, 0xdd, 0xf8, 0x79, 0x13, 0xb5, 0x43, 0x25, 0xac, 0x1c, 0x9c, 0xd4,
	0x94, 0x92, 0x22, 0xb4, 0x41, 0xe9, 0x85, 0x0b, 0x12, 0xca, 0x06, 0x88, 0xd1, 0xa6, 0x04, 0xaf,
	0xc4, 0x09, 0xc9, 0x72, 0xec, 0x91, 0xb1, 0xb0, 0x3d, 0x8e, 0xc7, 0xd9, 0xd6, 0x57, 0x2e, 0x5c,
	0x39, 0x21, 0x2e, 0x88, 0x6b, 0xaf, 0xdc, 0xf8, 0x08, 0x1c, 0x7b, 0x00, 0x09, 0x71, 0xa8, 0x60,
	0xf3, 0x25, 0x50, 0x4f, 0x68, 0x66, 0xbc, 0xb6, 0xb3, 0xc5, 0xb1, 0xd2, 0x4a, 0x55, 0xd4, 0xdb,
	0xbc, 0x99, 0xff, 0xfc, 0xe6, 0xbd, 0x37, 0x6f, 0x9e, 0x0d, 0x77, 0x9d, 0x8c, 0x46, 0xc1, 0xa3,
	0xdd, 0x98, 0x26, 0xce, 0x23, 0xca, 0x76, 0x93, 0x94, 0x66, 0xd4, 0xa5, 0x61, 0x39, 0x18, 0x89,
	0x01, 0x7e, 0x53, 0xea, 0x46, 0x85, 0x6e, 0xb4, 0x58, 0xde, 0xbc, 0xdd, 0x04, 0x08, 0xa9, 0x2f,
	0x55, 0x9b, 0xb7, 0x7c, 0xea, 0x53, 0x31, 0xdc, 0xe5, 0x23, 0x39, 0x6b, 0xfc, 0x35, 0x80, 0xc1,
	0x11, 0x61, 0xcc, 0xf1, 0x09, 0x1e, 0xc3, 0xc0, 0xa5, 0x51, 0xe4, 0xc4, 0x9e, 0x86, 0xb6, 0xd1,
	0x8e, 0xba, 0xf7, 0xce, 0xa8, 0xe1, 0xbc, 0xd1, 0x58, 0xea, 0x2c, 0x72, 0x7a, 0x46, 0x58, 0x76,
	0xd8, 0xb1, 0x16, 0x3b, 0xf1, 0x04, 0xd6, 0x8b, 0xa1, 0x9d, 0x92, 0x24, 0xcc, 0xb5, 0x15, 0x81,
	0x7a, 0xbb, 0x1d, 0x95, 0x84, 0xf9, 0x61, 0xc7, 0x1a, 0xba, 0x35, 0x1b, 0x7f, 0x08, 0xab, 0xa7,
	0x67, 0x24, 0xcd, 0xb5, 0x6e, 0x0b, 0xe5, 0x0b, 0xae, 0xaa, 0xdc, 0x91, 0xbb, 0xf0, 0x27, 0xa0,
	0x8a, 0x41, 0xe1, 0x4a, 0x4f, 0x40, 0xde, 0x6a, 0x83, 0x48, 0x47, 0xe0, 0xb4, 0xb4, 0x38, 0x87,
	0x85, 0x34, 0xb3, 0x43, 0x4a, 0xbf, 0x39, 0x4b, 0xb4, 0xd5, 0x16, 0xce, 0x34, 0xa4, 0xd9, 0x44,
	0x48, 0x39, 0x87, 0x95, 0x16, 0xfe, 0x0c, 0xc0, 0x77, 0x12, 0x9b, 0x87, 0x18, 0x64, 0x5a, 0x5f,
	0x60, 0xee, 0x35, 0x62, 0x3e, 0x75, 0x92, 0xb1, 0x50, 0x56, 0x71, 0x29, 0xfe, 0x62, 0x0e, 0x4f,
	0xe1, 0x46, 0xc5, 0x2a, 0x02, 0x1c, 0xb4, 0x5c, 0x5b, 0x8d, 0x28, 0x83, 0xdc, 0xf0, 0x2f, 0xcc,
	0xe0, 0xaf, 0xe0, 0x8d, 0x59, 0x40, 0x1e, 0xda, 0xee, 0xd7, 0x4e, 0xec, 0x13, 0x3b, 0x95, 0x07,
	0x6b, 0x6b, 0x82, 0xfb, 0x6e, 0x23, 0xf7, 0xcb, 0x80, 0x3c, 0x1c, 0x8b, 0x2d, 0x95, 0xab, 0x37,
	0x67, 0xcb, 0x93, 0x3c, 0x8d, 0x35, 0xba, 0xa6, 0xb4, 0xa4, 0xb1, 0xa2, 0xf2, 0x34, 0x56, 0x38,
	0x3c, 0x06, 0x60, 0x99, 0x93, 0x66, 0x36, 0x9f, 0xd3, 0x40, 0x60, 0x8c, 0xe6, 0xdb, 0xe0, 0x52,
	0xce, 0xe2, 0xf9, 0x63, 0x0b, 0x03, 0x9b, 0x30, 0x64, 0x79, 0xec, 0xda, 0x49, 0x4a, 0x12, 0x27,
	0x25, 0x9a, 0x2a, 0x30, 0x77, 0x9a, 0x31, 0x79, 0xec, 0x1e, 0x4b, 0xed, 0x61, 0xc7, 0x52, 0x59,
	0x65, 0x0a, 0x7f, 0x38, 0x4a, 0x5e, 0xc2, 0xb0, 0xcd, 0x9f, 0x3c, 0x76, 0x17, 0xf9, 0x57, 0xd8,
	0xc2, 0x10, 0x35, 0xc6, 0x21, 0x45, 0x71, 0xac, 0xb7, 0xd5, 0x58, 0x1e, 0xbb, 0xf2, 0xe6, 0x44,
	0x8d, 0x95, 0xd6, 0xbe, 0x02, 0x83, 0x48, 0x3e, 0x68, 0xc3, 0x81, 0x3e, 0x0f, 0xd5, 0xf4, 0xf0,
	0x3d, 0x50, 0x42, 0xe2, 0x78, 0x24, 0xb5, 0x03, 0xf9, 0xb8, 0x95, 0xfd, 0xe1, 0xb3, 0xa7, 0x5b,
	0x6b, 0x13, 0x31, 0x69, 0x1e, 0x58, 0x6b, 0x72, 0xd9, 0xf4, 0xf0, 0x7b, 0x00, 0x8c, 0x30, 0x16,
	0xd0, 0x98, 0x6b, 0xf9, 0xeb, 0xed, 0xed, 0xaf, 0x3f, 0x7b, 0xba, 0xa5, 0x4c, 0xe5, 0xac, 0x79,
	0x60, 0x29, 0x85, 0xc0, 0xf4, 0x8c, 0x6f, 0x11, 0x6c, 0x5c, 0x6c, 0x06, 0x4b, 0x00, 0x74, 0x39,
	0x80, 0xab, 0x0b, 0x77, 0x97, 0x8e, 0x2b, 0xba, 0x12, 0x57, 0x17, 0x02, 0xd3, 0xc3, 0xb7, 0x60,
	0x75, 0xe6, 0x84, 0x67, 0x44, 0xf4, 0x83, 0xa1, 0x25, 0x0d, 0xe3, 0x17, 0x04, 0xc3, 0x7a, 0x1b,
	0xe1, 0xe1, 0x32, 0x12, 0x3f, 0x1f, 0xee, 0x11, 0x89, 0x4e, 0x64, 0xb8, 0x72, 0xd9, 0xf4, 0xf0,
	0x07, 0x30, 0x10, 0x35, 0x59, 0x1c, 0xae, 0xee, 0x6d, 0x5d, 0x5a, 0x8f, 0xa6, 0x67, 0xf5, 0x67,
	0x32, 0xa7, 0x77, 0x61, 0x20, 0x9a, 0x42, 0xe0, 0x09, 0x6f, 0x0a, 0xb7, 0x27, 0xd4, 0xe7, 0xcf,
	0xdf, 0x3c, 0xb0, 0xfa, 0x7c, 0xb5, 0xee, 0x73, 0xaf, 0xee, 0xb3, 0x05, 0xc3, 0x7a, 0xcf, 0xba,
	0x62, 0xd6, 0x4a, 0xe6, 0x4a, 0x9d, 0xf9, 0x1d, 0x02, 0xa8, 0x7a, 0xd8, 0xab, 0xc9, 0xc2, 0xff,
	0xdf, 0xc8, 0xcf, 0x08, 0xa0, 0xea, 0x82, 0xaf, 0xc6, 0x93, 0x8b, 0x95, 0xd4, 0xbd, 0xbc, 0x92,
	0x8c, 0x0c, 0x6e, 0x2c, 0xf7, 0xd7, 0xfa, 0xd9, 0xe8, 0x85, 0x6b, 0x61, 0xe5, 0x92, 0x5a, 0x30,
	0x7e, 0x42, 0xb0, 0x71, 0xb1, 0x09, 0x5f, 0xab, 0x5a, 0x35, 0x8e, 0xe0, 0xe6, 0x73, 0xbd, 0xfc,
	0xc5, 0xd3, 0x62, 0xfc, 0xb0, 0x02, 0x50, 0xf1, 0x78, 0xa8, 0x91, 0x88, 0xaa, 0x31, 0x54, 0xb9,
	0xfc, 0x52, 0xa1, 0x7e, 0x04, 0x6a, 0xe8, 0xb0, 0xcc, 0x8e, 0x69, 0x1a, 0x39, 0x61, 0xf1, 0xe3,
	0xd0, 0xba, 0x1b, 0xf8, 0x9e, 0x07, 0x62, 0xcb, 0x52, 0x21, 0xf5, 0x5a, 0x5a, 0xd2, 0x7d, 0xe8,
	0x86, 0xd4, 0xd7, 0x56, 0xb7, 0xbb, 0x3b, 0xea, 0xde, 0xed, 0xc6, 0x73, 0x26, 0xd4, 0xff, 0x38,
	0xce, 0xd2, 0xdc, 0xe2, 0x6a, 0xe3, 0x31, 0x02, 0xa5, 0xfc, 0x2e, 0xbd, 0x44, 0xdd, 0x5d, 0xad,
	0x7b, 0x16, 0xae, 0x76, 0xaf, 0xe4, 0xea, 0x1f, 0x08, 0xd4, 0xda, 0xb7, 0xef, 0x1a, 0xbe, 0xe5,
	0x45, 0x5c, 0xbd, 0x2b, 0xc5, 0xf5, 0x23, 0xbf, 0x82, 0xf2, 0xeb, 0x7b, 0xad, 0x5e, 0xe1, 0xef,
	0xbc, 0x7b, 0x96, 0x5f, 0xf4, 0xd7, 0x25, 0xe3, 0x7b, 0x27, 0xb0, 0xf1, 0xe0, 0xf3, 0x63, 0xae,
	0x98, 0x92, 0x74, 0x16, 0xb8, 0x04, 0x1f, 0x43, 0x7f, 0x9a, 0xa5, 0xc4, 0x89, 0xf0, 0x76, 0x23,
	0xa3, 0x38, 0x7f, 0xb3, 0x55, 0xb1, 0x83, 0xde, 0x47, 0xfb, 0x77, 0xfe, 0xfd, 0x47, 0x47, 0x8f,
	0xe7, 0x3a, 0xfa, 0x75, 0xae, 0xa3, 0xdf, 0xe6, 0x3a, 0x7a, 0x32, 0xd7, 0xd1, 0xdf, 0x73, 0x1d,
	0x7d, 0x7f, 0xae, 0x77, 0x9e, 0x9c, 0xeb, 0x9d, 0x3f, 0xcf, 0xf5, 0xce, 0x49, 0x5f, 0xec, 0xbd,
	0xff, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x96, 0x76, 0x8b, 0x42, 0x78, 0x0d, 0x00, 0x00,
}

func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Message == nil {
		if this.Message != nil {
			return false
		}
	} else if this.Message == nil {
		return false
	} else if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *Message_Command) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_Command)
	if !ok {
		that2, ok := that.(Message_Command)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Command.Equal(that1.Command) {
		return false
	}
	return true
}
func (this *Message_CommandReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_CommandReply)
	if !ok {
		that2, ok := that.(Message_CommandReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CommandReply.Equal(that1.CommandReply) {
		return false
	}
	return true
}
func (this *Message_Query) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_Query)
	if !ok {
		that2, ok := that.(Message_Query)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Query.Equal(that1.Query) {
		return false
	}
	return true
}
func (this *Message_QueryReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_QueryReply)
	if !ok {
		that2, ok := that.(Message_QueryReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.QueryReply.Equal(that1.QueryReply) {
		return false
	}
	return true
}
func (this *Message_SlotLookup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_SlotLookup)
	if !ok {
		that2, ok := that.(Message_SlotLookup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SlotLookup.Equal(that1.SlotLookup) {
		return false
	}
	return true
}
func (this *Message_GapCommit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_GapCommit)
	if !ok {
		that2, ok := that.(Message_GapCommit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GapCommit.Equal(that1.GapCommit) {
		return false
	}
	return true
}
func (this *Message_GapCommitReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_GapCommitReply)
	if !ok {
		that2, ok := that.(Message_GapCommitReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GapCommitReply.Equal(that1.GapCommitReply) {
		return false
	}
	return true
}
func (this *Message_ViewChangeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_ViewChangeRequest)
	if !ok {
		that2, ok := that.(Message_ViewChangeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ViewChangeRequest.Equal(that1.ViewChangeRequest) {
		return false
	}
	return true
}
func (this *Message_ViewChange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_ViewChange)
	if !ok {
		that2, ok := that.(Message_ViewChange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ViewChange.Equal(that1.ViewChange) {
		return false
	}
	return true
}
func (this *Message_StartView) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_StartView)
	if !ok {
		that2, ok := that.(Message_StartView)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StartView.Equal(that1.StartView) {
		return false
	}
	return true
}
func (this *Message_SyncPrepare) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_SyncPrepare)
	if !ok {
		that2, ok := that.(Message_SyncPrepare)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SyncPrepare.Equal(that1.SyncPrepare) {
		return false
	}
	return true
}
func (this *Message_SyncReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_SyncReply)
	if !ok {
		that2, ok := that.(Message_SyncReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SyncReply.Equal(that1.SyncReply) {
		return false
	}
	return true
}
func (this *Message_SyncCommit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_SyncCommit)
	if !ok {
		that2, ok := that.(Message_SyncCommit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SyncCommit.Equal(that1.SyncCommit) {
		return false
	}
	return true
}
func (this *ViewId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ViewId)
	if !ok {
		that2, ok := that.(ViewId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LeaderId != that1.LeaderId {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	return true
}
func (this *CommandRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommandRequest)
	if !ok {
		that2, ok := that.(CommandRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	if this.MessageId != that1.MessageId {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	return true
}
func (this *CommandReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommandReply)
	if !ok {
		that2, ok := that.(CommandReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SenderId != that1.SenderId {
		return false
	}
	if !this.ViewId.Equal(that1.ViewId) {
		return false
	}
	if this.SlotId != that1.SlotId {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	return true
}
func (this *QueryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryRequest)
	if !ok {
		that2, ok := that.(QueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	return true
}
func (this *QueryReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryReply)
	if !ok {
		that2, ok := that.(QueryReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SenderId != that1.SenderId {
		return false
	}
	if !this.ViewId.Equal(that1.ViewId) {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	return true
}
func (this *SlotLookup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SlotLookup)
	if !ok {
		that2, ok := that.(SlotLookup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SenderId != that1.SenderId {
		return false
	}
	if !this.ViewId.Equal(that1.ViewId) {
		return false
	}
	if this.MessageId != that1.MessageId {
		return false
	}
	return true
}
func (this *GapCommitRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GapCommitRequest)
	if !ok {
		that2, ok := that.(GapCommitRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ViewId.Equal(that1.ViewId) {
		return false
	}
	if this.SlotId != that1.SlotId {
		return false
	}
	return true
}
func (this *GapCommitReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GapCommitReply)
	if !ok {
		that2, ok := that.(GapCommitReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SenderId != that1.SenderId {
		return false
	}
	if !this.ViewId.Equal(that1.ViewId) {
		return false
	}
	if this.SlotId != that1.SlotId {
		return false
	}
	return true
}
func (this *ViewChangeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ViewChangeRequest)
	if !ok {
		that2, ok := that.(ViewChangeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ViewId.Equal(that1.ViewId) {
		return false
	}
	return true
}
func (this *ViewChange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ViewChange)
	if !ok {
		that2, ok := that.(ViewChange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MemberId != that1.MemberId {
		return false
	}
	if !this.ViewId.Equal(that1.ViewId) {
		return false
	}
	if !this.LastNormal.Equal(that1.LastNormal) {
		return false
	}
	if this.MessageId != that1.MessageId {
		return false
	}
	if len(this.Log) != len(that1.Log) {
		return false
	}
	for i := range this.Log {
		if !this.Log[i].Equal(that1.Log[i]) {
			return false
		}
	}
	return true
}
func (this *StartView) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartView)
	if !ok {
		that2, ok := that.(StartView)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ViewId.Equal(that1.ViewId) {
		return false
	}
	if this.MessageId != that1.MessageId {
		return false
	}
	if len(this.Log) != len(that1.Log) {
		return false
	}
	for i := range this.Log {
		if !this.Log[i].Equal(that1.Log[i]) {
			return false
		}
	}
	return true
}
func (this *SyncPrepare) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncPrepare)
	if !ok {
		that2, ok := that.(SyncPrepare)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SenderId != that1.SenderId {
		return false
	}
	if !this.ViewId.Equal(that1.ViewId) {
		return false
	}
	if this.MessageId != that1.MessageId {
		return false
	}
	if len(this.Log) != len(that1.Log) {
		return false
	}
	for i := range this.Log {
		if !this.Log[i].Equal(that1.Log[i]) {
			return false
		}
	}
	return true
}
func (this *SyncReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncReply)
	if !ok {
		that2, ok := that.(SyncReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SenderId != that1.SenderId {
		return false
	}
	if !this.ViewId.Equal(that1.ViewId) {
		return false
	}
	if this.SlotId != that1.SlotId {
		return false
	}
	return true
}
func (this *SyncCommit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncCommit)
	if !ok {
		that2, ok := that.(SyncCommit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SenderId != that1.SenderId {
		return false
	}
	if !this.ViewId.Equal(that1.ViewId) {
		return false
	}
	if this.MessageId != that1.MessageId {
		return false
	}
	if len(this.Log) != len(that1.Log) {
		return false
	}
	for i := range this.Log {
		if !this.Log[i].Equal(that1.Log[i]) {
			return false
		}
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NOPaxosServiceClient is the client API for NOPaxosService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NOPaxosServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (NOPaxosService_StreamClient, error)
}

type nOPaxosServiceClient struct {
	cc *grpc.ClientConn
}

func NewNOPaxosServiceClient(cc *grpc.ClientConn) NOPaxosServiceClient {
	return &nOPaxosServiceClient{cc}
}

func (c *nOPaxosServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (NOPaxosService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NOPaxosService_serviceDesc.Streams[0], "/atomix.nopaxos.protocol.NOPaxosService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &nOPaxosServiceStreamClient{stream}
	return x, nil
}

type NOPaxosService_StreamClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type nOPaxosServiceStreamClient struct {
	grpc.ClientStream
}

func (x *nOPaxosServiceStreamClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nOPaxosServiceStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NOPaxosServiceServer is the server API for NOPaxosService service.
type NOPaxosServiceServer interface {
	Stream(NOPaxosService_StreamServer) error
}

// UnimplementedNOPaxosServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNOPaxosServiceServer struct {
}

func (*UnimplementedNOPaxosServiceServer) Stream(srv NOPaxosService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

func RegisterNOPaxosServiceServer(s *grpc.Server, srv NOPaxosServiceServer) {
	s.RegisterService(&_NOPaxosService_serviceDesc, srv)
}

func _NOPaxosService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NOPaxosServiceServer).Stream(&nOPaxosServiceStreamServer{stream})
}

type NOPaxosService_StreamServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type nOPaxosServiceStreamServer struct {
	grpc.ServerStream
}

func (x *nOPaxosServiceStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nOPaxosServiceStreamServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _NOPaxosService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atomix.nopaxos.protocol.NOPaxosService",
	HandlerType: (*NOPaxosServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _NOPaxosService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "atomix/nopaxos/protocol/protocol.proto",
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Message_Command) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Command) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Message_CommandReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_CommandReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CommandReply != nil {
		{
			size, err := m.CommandReply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Message_Query) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Query) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Message_QueryReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_QueryReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.QueryReply != nil {
		{
			size, err := m.QueryReply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Message_SlotLookup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_SlotLookup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SlotLookup != nil {
		{
			size, err := m.SlotLookup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Message_GapCommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_GapCommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GapCommit != nil {
		{
			size, err := m.GapCommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Message_GapCommitReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_GapCommitReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GapCommitReply != nil {
		{
			size, err := m.GapCommitReply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Message_ViewChangeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_ViewChangeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ViewChangeRequest != nil {
		{
			size, err := m.ViewChangeRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Message_ViewChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_ViewChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ViewChange != nil {
		{
			size, err := m.ViewChange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *Message_StartView) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_StartView) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StartView != nil {
		{
			size, err := m.StartView.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *Message_SyncPrepare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_SyncPrepare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SyncPrepare != nil {
		{
			size, err := m.SyncPrepare.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *Message_SyncReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_SyncReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SyncReply != nil {
		{
			size, err := m.SyncReply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *Message_SyncCommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_SyncCommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SyncCommit != nil {
		{
			size, err := m.SyncCommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *ViewId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SessionId != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LeaderId) > 0 {
		i -= len(m.LeaderId)
		copy(dAtA[i:], m.LeaderId)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.LeaderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommandRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MessageId != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.MessageId))
		i--
		dAtA[i] = 0x10
	}
	if m.SessionId != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommandReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	if m.SlotId != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.SlotId))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewId != nil {
		{
			size, err := m.ViewId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderId) > 0 {
		i -= len(m.SenderId)
		copy(dAtA[i:], m.SenderId)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.SenderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.SessionId != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ViewId != nil {
		{
			size, err := m.ViewId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderId) > 0 {
		i -= len(m.SenderId)
		copy(dAtA[i:], m.SenderId)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.SenderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SlotLookup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlotLookup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlotLookup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MessageId != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.MessageId))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewId != nil {
		{
			size, err := m.ViewId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderId) > 0 {
		i -= len(m.SenderId)
		copy(dAtA[i:], m.SenderId)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.SenderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GapCommitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GapCommitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GapCommitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SlotId != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.SlotId))
		i--
		dAtA[i] = 0x10
	}
	if m.ViewId != nil {
		{
			size, err := m.ViewId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GapCommitReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GapCommitReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GapCommitReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SlotId != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.SlotId))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewId != nil {
		{
			size, err := m.ViewId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderId) > 0 {
		i -= len(m.SenderId)
		copy(dAtA[i:], m.SenderId)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.SenderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewChangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewChangeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewChangeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ViewId != nil {
		{
			size, err := m.ViewId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Log) > 0 {
		for iNdEx := len(m.Log) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Log[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocol(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.MessageId != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.MessageId))
		i--
		dAtA[i] = 0x20
	}
	if m.LastNormal != nil {
		{
			size, err := m.LastNormal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ViewId != nil {
		{
			size, err := m.ViewId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MemberId) > 0 {
		i -= len(m.MemberId)
		copy(dAtA[i:], m.MemberId)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.MemberId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartView) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartView) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Log) > 0 {
		for iNdEx := len(m.Log) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Log[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocol(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MessageId != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.MessageId))
		i--
		dAtA[i] = 0x10
	}
	if m.ViewId != nil {
		{
			size, err := m.ViewId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncPrepare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncPrepare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncPrepare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Log) > 0 {
		for iNdEx := len(m.Log) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Log[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocol(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.MessageId != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.MessageId))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewId != nil {
		{
			size, err := m.ViewId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderId) > 0 {
		i -= len(m.SenderId)
		copy(dAtA[i:], m.SenderId)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.SenderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SlotId != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.SlotId))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewId != nil {
		{
			size, err := m.ViewId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderId) > 0 {
		i -= len(m.SenderId)
		copy(dAtA[i:], m.SenderId)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.SenderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncCommit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncCommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncCommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Log) > 0 {
		for iNdEx := len(m.Log) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Log[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocol(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.MessageId != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.MessageId))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewId != nil {
		{
			size, err := m.ViewId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderId) > 0 {
		i -= len(m.SenderId)
		copy(dAtA[i:], m.SenderId)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.SenderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProtocol(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtocol(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedMessage(r randyProtocol, easy bool) *Message {
	this := &Message{}
	oneofNumber_Message := []int32{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}[r.Intn(13)]
	switch oneofNumber_Message {
	case 1:
		this.Message = NewPopulatedMessage_Command(r, easy)
	case 2:
		this.Message = NewPopulatedMessage_CommandReply(r, easy)
	case 3:
		this.Message = NewPopulatedMessage_Query(r, easy)
	case 4:
		this.Message = NewPopulatedMessage_QueryReply(r, easy)
	case 5:
		this.Message = NewPopulatedMessage_SlotLookup(r, easy)
	case 6:
		this.Message = NewPopulatedMessage_GapCommit(r, easy)
	case 7:
		this.Message = NewPopulatedMessage_GapCommitReply(r, easy)
	case 8:
		this.Message = NewPopulatedMessage_ViewChangeRequest(r, easy)
	case 9:
		this.Message = NewPopulatedMessage_ViewChange(r, easy)
	case 10:
		this.Message = NewPopulatedMessage_StartView(r, easy)
	case 11:
		this.Message = NewPopulatedMessage_SyncPrepare(r, easy)
	case 12:
		this.Message = NewPopulatedMessage_SyncReply(r, easy)
	case 13:
		this.Message = NewPopulatedMessage_SyncCommit(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMessage_Command(r randyProtocol, easy bool) *Message_Command {
	this := &Message_Command{}
	this.Command = NewPopulatedCommandRequest(r, easy)
	return this
}
func NewPopulatedMessage_CommandReply(r randyProtocol, easy bool) *Message_CommandReply {
	this := &Message_CommandReply{}
	this.CommandReply = NewPopulatedCommandReply(r, easy)
	return this
}
func NewPopulatedMessage_Query(r randyProtocol, easy bool) *Message_Query {
	this := &Message_Query{}
	this.Query = NewPopulatedQueryRequest(r, easy)
	return this
}
func NewPopulatedMessage_QueryReply(r randyProtocol, easy bool) *Message_QueryReply {
	this := &Message_QueryReply{}
	this.QueryReply = NewPopulatedQueryReply(r, easy)
	return this
}
func NewPopulatedMessage_SlotLookup(r randyProtocol, easy bool) *Message_SlotLookup {
	this := &Message_SlotLookup{}
	this.SlotLookup = NewPopulatedSlotLookup(r, easy)
	return this
}
func NewPopulatedMessage_GapCommit(r randyProtocol, easy bool) *Message_GapCommit {
	this := &Message_GapCommit{}
	this.GapCommit = NewPopulatedGapCommitRequest(r, easy)
	return this
}
func NewPopulatedMessage_GapCommitReply(r randyProtocol, easy bool) *Message_GapCommitReply {
	this := &Message_GapCommitReply{}
	this.GapCommitReply = NewPopulatedGapCommitReply(r, easy)
	return this
}
func NewPopulatedMessage_ViewChangeRequest(r randyProtocol, easy bool) *Message_ViewChangeRequest {
	this := &Message_ViewChangeRequest{}
	this.ViewChangeRequest = NewPopulatedViewChangeRequest(r, easy)
	return this
}
func NewPopulatedMessage_ViewChange(r randyProtocol, easy bool) *Message_ViewChange {
	this := &Message_ViewChange{}
	this.ViewChange = NewPopulatedViewChange(r, easy)
	return this
}
func NewPopulatedMessage_StartView(r randyProtocol, easy bool) *Message_StartView {
	this := &Message_StartView{}
	this.StartView = NewPopulatedStartView(r, easy)
	return this
}
func NewPopulatedMessage_SyncPrepare(r randyProtocol, easy bool) *Message_SyncPrepare {
	this := &Message_SyncPrepare{}
	this.SyncPrepare = NewPopulatedSyncPrepare(r, easy)
	return this
}
func NewPopulatedMessage_SyncReply(r randyProtocol, easy bool) *Message_SyncReply {
	this := &Message_SyncReply{}
	this.SyncReply = NewPopulatedSyncReply(r, easy)
	return this
}
func NewPopulatedMessage_SyncCommit(r randyProtocol, easy bool) *Message_SyncCommit {
	this := &Message_SyncCommit{}
	this.SyncCommit = NewPopulatedSyncCommit(r, easy)
	return this
}
func NewPopulatedViewId(r randyProtocol, easy bool) *ViewId {
	this := &ViewId{}
	this.LeaderId = LeaderID(randStringProtocol(r))
	this.SessionId = SessionID(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCommandRequest(r randyProtocol, easy bool) *CommandRequest {
	this := &CommandRequest{}
	this.SessionId = SessionID(uint64(r.Uint32()))
	this.MessageId = MessageID(uint64(r.Uint32()))
	v1 := r.Intn(100)
	this.Value = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Value[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCommandReply(r randyProtocol, easy bool) *CommandReply {
	this := &CommandReply{}
	this.SenderId = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewId = NewPopulatedViewId(r, easy)
	}
	this.SlotId = LogSlotID(uint64(r.Uint32()))
	v2 := r.Intn(100)
	this.Value = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Value[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedQueryRequest(r randyProtocol, easy bool) *QueryRequest {
	this := &QueryRequest{}
	this.SessionId = SessionID(uint64(r.Uint32()))
	v3 := r.Intn(100)
	this.Value = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.Value[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedQueryReply(r randyProtocol, easy bool) *QueryReply {
	this := &QueryReply{}
	this.SenderId = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewId = NewPopulatedViewId(r, easy)
	}
	v4 := r.Intn(100)
	this.Value = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.Value[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSlotLookup(r randyProtocol, easy bool) *SlotLookup {
	this := &SlotLookup{}
	this.SenderId = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewId = NewPopulatedViewId(r, easy)
	}
	this.MessageId = MessageID(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGapCommitRequest(r randyProtocol, easy bool) *GapCommitRequest {
	this := &GapCommitRequest{}
	if r.Intn(5) != 0 {
		this.ViewId = NewPopulatedViewId(r, easy)
	}
	this.SlotId = LogSlotID(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGapCommitReply(r randyProtocol, easy bool) *GapCommitReply {
	this := &GapCommitReply{}
	this.SenderId = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewId = NewPopulatedViewId(r, easy)
	}
	this.SlotId = LogSlotID(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedViewChangeRequest(r randyProtocol, easy bool) *ViewChangeRequest {
	this := &ViewChangeRequest{}
	if r.Intn(5) != 0 {
		this.ViewId = NewPopulatedViewId(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedViewChange(r randyProtocol, easy bool) *ViewChange {
	this := &ViewChange{}
	this.MemberId = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewId = NewPopulatedViewId(r, easy)
	}
	if r.Intn(5) != 0 {
		this.LastNormal = NewPopulatedViewId(r, easy)
	}
	this.MessageId = MessageID(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		v5 := r.Intn(5)
		this.Log = make([]*LogEntry, v5)
		for i := 0; i < v5; i++ {
			this.Log[i] = NewPopulatedLogEntry(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStartView(r randyProtocol, easy bool) *StartView {
	this := &StartView{}
	if r.Intn(5) != 0 {
		this.ViewId = NewPopulatedViewId(r, easy)
	}
	this.MessageId = MessageID(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		v6 := r.Intn(5)
		this.Log = make([]*LogEntry, v6)
		for i := 0; i < v6; i++ {
			this.Log[i] = NewPopulatedLogEntry(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSyncPrepare(r randyProtocol, easy bool) *SyncPrepare {
	this := &SyncPrepare{}
	this.SenderId = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewId = NewPopulatedViewId(r, easy)
	}
	this.MessageId = MessageID(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		v7 := r.Intn(5)
		this.Log = make([]*LogEntry, v7)
		for i := 0; i < v7; i++ {
			this.Log[i] = NewPopulatedLogEntry(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSyncReply(r randyProtocol, easy bool) *SyncReply {
	this := &SyncReply{}
	this.SenderId = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewId = NewPopulatedViewId(r, easy)
	}
	this.SlotId = LogSlotID(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSyncCommit(r randyProtocol, easy bool) *SyncCommit {
	this := &SyncCommit{}
	this.SenderId = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewId = NewPopulatedViewId(r, easy)
	}
	this.MessageId = MessageID(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		v8 := r.Intn(5)
		this.Log = make([]*LogEntry, v8)
		for i := 0; i < v8; i++ {
			this.Log[i] = NewPopulatedLogEntry(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyProtocol interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneProtocol(r randyProtocol) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringProtocol(r randyProtocol) string {
	v9 := r.Intn(100)
	tmps := make([]rune, v9)
	for i := 0; i < v9; i++ {
		tmps[i] = randUTF8RuneProtocol(r)
	}
	return string(tmps)
}
func randUnrecognizedProtocol(r randyProtocol, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldProtocol(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldProtocol(dAtA []byte, r randyProtocol, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateProtocol(dAtA, uint64(key))
		v10 := r.Int63()
		if r.Intn(2) == 0 {
			v10 *= -1
		}
		dAtA = encodeVarintPopulateProtocol(dAtA, uint64(v10))
	case 1:
		dAtA = encodeVarintPopulateProtocol(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateProtocol(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateProtocol(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateProtocol(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateProtocol(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		n += m.Message.Size()
	}
	return n
}

func (m *Message_Command) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *Message_CommandReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommandReply != nil {
		l = m.CommandReply.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *Message_Query) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *Message_QueryReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryReply != nil {
		l = m.QueryReply.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *Message_SlotLookup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlotLookup != nil {
		l = m.SlotLookup.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *Message_GapCommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GapCommit != nil {
		l = m.GapCommit.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *Message_GapCommitReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GapCommitReply != nil {
		l = m.GapCommitReply.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *Message_ViewChangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViewChangeRequest != nil {
		l = m.ViewChangeRequest.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *Message_ViewChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViewChange != nil {
		l = m.ViewChange.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *Message_StartView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartView != nil {
		l = m.StartView.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *Message_SyncPrepare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SyncPrepare != nil {
		l = m.SyncPrepare.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *Message_SyncReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SyncReply != nil {
		l = m.SyncReply.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *Message_SyncCommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SyncCommit != nil {
		l = m.SyncCommit.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ViewId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LeaderId)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.SessionId != 0 {
		n += 1 + sovProtocol(uint64(m.SessionId))
	}
	return n
}

func (m *CommandRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionId != 0 {
		n += 1 + sovProtocol(uint64(m.SessionId))
	}
	if m.MessageId != 0 {
		n += 1 + sovProtocol(uint64(m.MessageId))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *CommandReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderId)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewId != nil {
		l = m.ViewId.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.SlotId != 0 {
		n += 1 + sovProtocol(uint64(m.SlotId))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *QueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionId != 0 {
		n += 1 + sovProtocol(uint64(m.SessionId))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *QueryReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderId)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewId != nil {
		l = m.ViewId.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *SlotLookup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderId)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewId != nil {
		l = m.ViewId.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.MessageId != 0 {
		n += 1 + sovProtocol(uint64(m.MessageId))
	}
	return n
}

func (m *GapCommitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViewId != nil {
		l = m.ViewId.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.SlotId != 0 {
		n += 1 + sovProtocol(uint64(m.SlotId))
	}
	return n
}

func (m *GapCommitReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderId)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewId != nil {
		l = m.ViewId.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.SlotId != 0 {
		n += 1 + sovProtocol(uint64(m.SlotId))
	}
	return n
}

func (m *ViewChangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViewId != nil {
		l = m.ViewId.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *ViewChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MemberId)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewId != nil {
		l = m.ViewId.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.LastNormal != nil {
		l = m.LastNormal.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.MessageId != 0 {
		n += 1 + sovProtocol(uint64(m.MessageId))
	}
	if len(m.Log) > 0 {
		for _, e := range m.Log {
			l = e.Size()
			n += 1 + l + sovProtocol(uint64(l))
		}
	}
	return n
}

func (m *StartView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViewId != nil {
		l = m.ViewId.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.MessageId != 0 {
		n += 1 + sovProtocol(uint64(m.MessageId))
	}
	if len(m.Log) > 0 {
		for _, e := range m.Log {
			l = e.Size()
			n += 1 + l + sovProtocol(uint64(l))
		}
	}
	return n
}

func (m *SyncPrepare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderId)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewId != nil {
		l = m.ViewId.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.MessageId != 0 {
		n += 1 + sovProtocol(uint64(m.MessageId))
	}
	if len(m.Log) > 0 {
		for _, e := range m.Log {
			l = e.Size()
			n += 1 + l + sovProtocol(uint64(l))
		}
	}
	return n
}

func (m *SyncReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderId)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewId != nil {
		l = m.ViewId.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.SlotId != 0 {
		n += 1 + sovProtocol(uint64(m.SlotId))
	}
	return n
}

func (m *SyncCommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderId)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewId != nil {
		l = m.ViewId.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.MessageId != 0 {
		n += 1 + sovProtocol(uint64(m.MessageId))
	}
	if len(m.Log) > 0 {
		for _, e := range m.Log {
			l = e.Size()
			n += 1 + l + sovProtocol(uint64(l))
		}
	}
	return n
}

func sovProtocol(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtocol(x uint64) (n int) {
	return sovProtocol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CommandRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_Command{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandReply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CommandReply{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_CommandReply{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &QueryRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_Query{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryReply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &QueryReply{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_QueryReply{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotLookup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SlotLookup{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_SlotLookup{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GapCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GapCommitRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_GapCommit{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GapCommitReply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GapCommitReply{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_GapCommitReply{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewChangeRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewChangeRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_ViewChangeRequest{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewChange{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_ViewChange{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartView", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StartView{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_StartView{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncPrepare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyncPrepare{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_SyncPrepare{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncReply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyncReply{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_SyncReply{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyncCommit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_SyncCommit{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeaderId = LeaderID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= SessionID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= SessionID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderId = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewId == nil {
				m.ViewId = &ViewId{}
			}
			if err := m.ViewId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotId", wireType)
			}
			m.SlotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotId |= LogSlotID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= SessionID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderId = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewId == nil {
				m.ViewId = &ViewId{}
			}
			if err := m.ViewId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlotLookup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlotLookup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlotLookup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderId = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewId == nil {
				m.ViewId = &ViewId{}
			}
			if err := m.ViewId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GapCommitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GapCommitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GapCommitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewId == nil {
				m.ViewId = &ViewId{}
			}
			if err := m.ViewId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotId", wireType)
			}
			m.SlotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotId |= LogSlotID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GapCommitReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GapCommitReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GapCommitReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderId = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewId == nil {
				m.ViewId = &ViewId{}
			}
			if err := m.ViewId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotId", wireType)
			}
			m.SlotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotId |= LogSlotID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewChangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewChangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewChangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewId == nil {
				m.ViewId = &ViewId{}
			}
			if err := m.ViewId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberId = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewId == nil {
				m.ViewId = &ViewId{}
			}
			if err := m.ViewId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastNormal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastNormal == nil {
				m.LastNormal = &ViewId{}
			}
			if err := m.LastNormal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = append(m.Log, &LogEntry{})
			if err := m.Log[len(m.Log)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewId == nil {
				m.ViewId = &ViewId{}
			}
			if err := m.ViewId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = append(m.Log, &LogEntry{})
			if err := m.Log[len(m.Log)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncPrepare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncPrepare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncPrepare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderId = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewId == nil {
				m.ViewId = &ViewId{}
			}
			if err := m.ViewId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = append(m.Log, &LogEntry{})
			if err := m.Log[len(m.Log)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderId = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewId == nil {
				m.ViewId = &ViewId{}
			}
			if err := m.ViewId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotId", wireType)
			}
			m.SlotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotId |= LogSlotID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncCommit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncCommit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncCommit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderId = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewId == nil {
				m.ViewId = &ViewId{}
			}
			if err := m.ViewId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = append(m.Log, &LogEntry{})
			if err := m.Log[len(m.Log)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtocol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtocol
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtocol
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtocol
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtocol        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtocol          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtocol = fmt.Errorf("proto: unexpected end of group")
)
