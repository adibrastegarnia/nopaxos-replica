// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/nopaxos/protocol/protocol.proto

package protocol

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClientMessage struct {
	// Types that are valid to be assigned to Message:
	//	*ClientMessage_Command
	//	*ClientMessage_CommandReply
	//	*ClientMessage_Query
	//	*ClientMessage_QueryReply
	Message isClientMessage_Message `protobuf_oneof:"message"`
}

func (m *ClientMessage) Reset()         { *m = ClientMessage{} }
func (m *ClientMessage) String() string { return proto.CompactTextString(m) }
func (*ClientMessage) ProtoMessage()    {}
func (*ClientMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{0}
}
func (m *ClientMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientMessage.Merge(m, src)
}
func (m *ClientMessage) XXX_Size() int {
	return m.Size()
}
func (m *ClientMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ClientMessage proto.InternalMessageInfo

type isClientMessage_Message interface {
	isClientMessage_Message()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ClientMessage_Command struct {
	Command *CommandRequest `protobuf:"bytes,1,opt,name=command,proto3,oneof" json:"command,omitempty"`
}
type ClientMessage_CommandReply struct {
	CommandReply *CommandReply `protobuf:"bytes,2,opt,name=command_reply,json=commandReply,proto3,oneof" json:"command_reply,omitempty"`
}
type ClientMessage_Query struct {
	Query *QueryRequest `protobuf:"bytes,3,opt,name=query,proto3,oneof" json:"query,omitempty"`
}
type ClientMessage_QueryReply struct {
	QueryReply *QueryReply `protobuf:"bytes,4,opt,name=query_reply,json=queryReply,proto3,oneof" json:"query_reply,omitempty"`
}

func (*ClientMessage_Command) isClientMessage_Message()      {}
func (*ClientMessage_CommandReply) isClientMessage_Message() {}
func (*ClientMessage_Query) isClientMessage_Message()        {}
func (*ClientMessage_QueryReply) isClientMessage_Message()   {}

func (m *ClientMessage) GetMessage() isClientMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *ClientMessage) GetCommand() *CommandRequest {
	if x, ok := m.GetMessage().(*ClientMessage_Command); ok {
		return x.Command
	}
	return nil
}

func (m *ClientMessage) GetCommandReply() *CommandReply {
	if x, ok := m.GetMessage().(*ClientMessage_CommandReply); ok {
		return x.CommandReply
	}
	return nil
}

func (m *ClientMessage) GetQuery() *QueryRequest {
	if x, ok := m.GetMessage().(*ClientMessage_Query); ok {
		return x.Query
	}
	return nil
}

func (m *ClientMessage) GetQueryReply() *QueryReply {
	if x, ok := m.GetMessage().(*ClientMessage_QueryReply); ok {
		return x.QueryReply
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ClientMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ClientMessage_Command)(nil),
		(*ClientMessage_CommandReply)(nil),
		(*ClientMessage_Query)(nil),
		(*ClientMessage_QueryReply)(nil),
	}
}

type ReplicaMessage struct {
	// Types that are valid to be assigned to Message:
	//	*ReplicaMessage_Command
	//	*ReplicaMessage_CommandReply
	//	*ReplicaMessage_Query
	//	*ReplicaMessage_QueryReply
	//	*ReplicaMessage_SlotLookup
	//	*ReplicaMessage_GapCommit
	//	*ReplicaMessage_GapCommitReply
	//	*ReplicaMessage_ViewChangeRequest
	//	*ReplicaMessage_ViewChange
	//	*ReplicaMessage_ViewChangeRepair
	//	*ReplicaMessage_ViewChangeRepairReply
	//	*ReplicaMessage_StartView
	//	*ReplicaMessage_ViewRepair
	//	*ReplicaMessage_ViewRepairReply
	//	*ReplicaMessage_SyncPrepare
	//	*ReplicaMessage_SyncRepair
	//	*ReplicaMessage_SyncRepairReply
	//	*ReplicaMessage_SyncReply
	//	*ReplicaMessage_SyncCommit
	//	*ReplicaMessage_Ping
	Message isReplicaMessage_Message `protobuf_oneof:"message"`
}

func (m *ReplicaMessage) Reset()         { *m = ReplicaMessage{} }
func (m *ReplicaMessage) String() string { return proto.CompactTextString(m) }
func (*ReplicaMessage) ProtoMessage()    {}
func (*ReplicaMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{1}
}
func (m *ReplicaMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicaMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicaMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicaMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicaMessage.Merge(m, src)
}
func (m *ReplicaMessage) XXX_Size() int {
	return m.Size()
}
func (m *ReplicaMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicaMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicaMessage proto.InternalMessageInfo

type isReplicaMessage_Message interface {
	isReplicaMessage_Message()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplicaMessage_Command struct {
	Command *CommandRequest `protobuf:"bytes,1,opt,name=command,proto3,oneof" json:"command,omitempty"`
}
type ReplicaMessage_CommandReply struct {
	CommandReply *CommandReply `protobuf:"bytes,2,opt,name=command_reply,json=commandReply,proto3,oneof" json:"command_reply,omitempty"`
}
type ReplicaMessage_Query struct {
	Query *QueryRequest `protobuf:"bytes,3,opt,name=query,proto3,oneof" json:"query,omitempty"`
}
type ReplicaMessage_QueryReply struct {
	QueryReply *QueryReply `protobuf:"bytes,4,opt,name=query_reply,json=queryReply,proto3,oneof" json:"query_reply,omitempty"`
}
type ReplicaMessage_SlotLookup struct {
	SlotLookup *SlotLookup `protobuf:"bytes,5,opt,name=slot_lookup,json=slotLookup,proto3,oneof" json:"slot_lookup,omitempty"`
}
type ReplicaMessage_GapCommit struct {
	GapCommit *GapCommitRequest `protobuf:"bytes,6,opt,name=gap_commit,json=gapCommit,proto3,oneof" json:"gap_commit,omitempty"`
}
type ReplicaMessage_GapCommitReply struct {
	GapCommitReply *GapCommitReply `protobuf:"bytes,7,opt,name=gap_commit_reply,json=gapCommitReply,proto3,oneof" json:"gap_commit_reply,omitempty"`
}
type ReplicaMessage_ViewChangeRequest struct {
	ViewChangeRequest *ViewChangeRequest `protobuf:"bytes,8,opt,name=view_change_request,json=viewChangeRequest,proto3,oneof" json:"view_change_request,omitempty"`
}
type ReplicaMessage_ViewChange struct {
	ViewChange *ViewChange `protobuf:"bytes,9,opt,name=view_change,json=viewChange,proto3,oneof" json:"view_change,omitempty"`
}
type ReplicaMessage_ViewChangeRepair struct {
	ViewChangeRepair *ViewChangeRepair `protobuf:"bytes,10,opt,name=view_change_repair,json=viewChangeRepair,proto3,oneof" json:"view_change_repair,omitempty"`
}
type ReplicaMessage_ViewChangeRepairReply struct {
	ViewChangeRepairReply *ViewChangeRepairReply `protobuf:"bytes,11,opt,name=view_change_repair_reply,json=viewChangeRepairReply,proto3,oneof" json:"view_change_repair_reply,omitempty"`
}
type ReplicaMessage_StartView struct {
	StartView *StartView `protobuf:"bytes,12,opt,name=start_view,json=startView,proto3,oneof" json:"start_view,omitempty"`
}
type ReplicaMessage_ViewRepair struct {
	ViewRepair *ViewRepair `protobuf:"bytes,13,opt,name=view_repair,json=viewRepair,proto3,oneof" json:"view_repair,omitempty"`
}
type ReplicaMessage_ViewRepairReply struct {
	ViewRepairReply *ViewRepairReply `protobuf:"bytes,14,opt,name=view_repair_reply,json=viewRepairReply,proto3,oneof" json:"view_repair_reply,omitempty"`
}
type ReplicaMessage_SyncPrepare struct {
	SyncPrepare *SyncPrepare `protobuf:"bytes,15,opt,name=sync_prepare,json=syncPrepare,proto3,oneof" json:"sync_prepare,omitempty"`
}
type ReplicaMessage_SyncRepair struct {
	SyncRepair *SyncRepair `protobuf:"bytes,16,opt,name=sync_repair,json=syncRepair,proto3,oneof" json:"sync_repair,omitempty"`
}
type ReplicaMessage_SyncRepairReply struct {
	SyncRepairReply *SyncRepairReply `protobuf:"bytes,17,opt,name=sync_repair_reply,json=syncRepairReply,proto3,oneof" json:"sync_repair_reply,omitempty"`
}
type ReplicaMessage_SyncReply struct {
	SyncReply *SyncReply `protobuf:"bytes,18,opt,name=sync_reply,json=syncReply,proto3,oneof" json:"sync_reply,omitempty"`
}
type ReplicaMessage_SyncCommit struct {
	SyncCommit *SyncCommit `protobuf:"bytes,19,opt,name=sync_commit,json=syncCommit,proto3,oneof" json:"sync_commit,omitempty"`
}
type ReplicaMessage_Ping struct {
	Ping *Ping `protobuf:"bytes,20,opt,name=ping,proto3,oneof" json:"ping,omitempty"`
}

func (*ReplicaMessage_Command) isReplicaMessage_Message()               {}
func (*ReplicaMessage_CommandReply) isReplicaMessage_Message()          {}
func (*ReplicaMessage_Query) isReplicaMessage_Message()                 {}
func (*ReplicaMessage_QueryReply) isReplicaMessage_Message()            {}
func (*ReplicaMessage_SlotLookup) isReplicaMessage_Message()            {}
func (*ReplicaMessage_GapCommit) isReplicaMessage_Message()             {}
func (*ReplicaMessage_GapCommitReply) isReplicaMessage_Message()        {}
func (*ReplicaMessage_ViewChangeRequest) isReplicaMessage_Message()     {}
func (*ReplicaMessage_ViewChange) isReplicaMessage_Message()            {}
func (*ReplicaMessage_ViewChangeRepair) isReplicaMessage_Message()      {}
func (*ReplicaMessage_ViewChangeRepairReply) isReplicaMessage_Message() {}
func (*ReplicaMessage_StartView) isReplicaMessage_Message()             {}
func (*ReplicaMessage_ViewRepair) isReplicaMessage_Message()            {}
func (*ReplicaMessage_ViewRepairReply) isReplicaMessage_Message()       {}
func (*ReplicaMessage_SyncPrepare) isReplicaMessage_Message()           {}
func (*ReplicaMessage_SyncRepair) isReplicaMessage_Message()            {}
func (*ReplicaMessage_SyncRepairReply) isReplicaMessage_Message()       {}
func (*ReplicaMessage_SyncReply) isReplicaMessage_Message()             {}
func (*ReplicaMessage_SyncCommit) isReplicaMessage_Message()            {}
func (*ReplicaMessage_Ping) isReplicaMessage_Message()                  {}

func (m *ReplicaMessage) GetMessage() isReplicaMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *ReplicaMessage) GetCommand() *CommandRequest {
	if x, ok := m.GetMessage().(*ReplicaMessage_Command); ok {
		return x.Command
	}
	return nil
}

func (m *ReplicaMessage) GetCommandReply() *CommandReply {
	if x, ok := m.GetMessage().(*ReplicaMessage_CommandReply); ok {
		return x.CommandReply
	}
	return nil
}

func (m *ReplicaMessage) GetQuery() *QueryRequest {
	if x, ok := m.GetMessage().(*ReplicaMessage_Query); ok {
		return x.Query
	}
	return nil
}

func (m *ReplicaMessage) GetQueryReply() *QueryReply {
	if x, ok := m.GetMessage().(*ReplicaMessage_QueryReply); ok {
		return x.QueryReply
	}
	return nil
}

func (m *ReplicaMessage) GetSlotLookup() *SlotLookup {
	if x, ok := m.GetMessage().(*ReplicaMessage_SlotLookup); ok {
		return x.SlotLookup
	}
	return nil
}

func (m *ReplicaMessage) GetGapCommit() *GapCommitRequest {
	if x, ok := m.GetMessage().(*ReplicaMessage_GapCommit); ok {
		return x.GapCommit
	}
	return nil
}

func (m *ReplicaMessage) GetGapCommitReply() *GapCommitReply {
	if x, ok := m.GetMessage().(*ReplicaMessage_GapCommitReply); ok {
		return x.GapCommitReply
	}
	return nil
}

func (m *ReplicaMessage) GetViewChangeRequest() *ViewChangeRequest {
	if x, ok := m.GetMessage().(*ReplicaMessage_ViewChangeRequest); ok {
		return x.ViewChangeRequest
	}
	return nil
}

func (m *ReplicaMessage) GetViewChange() *ViewChange {
	if x, ok := m.GetMessage().(*ReplicaMessage_ViewChange); ok {
		return x.ViewChange
	}
	return nil
}

func (m *ReplicaMessage) GetViewChangeRepair() *ViewChangeRepair {
	if x, ok := m.GetMessage().(*ReplicaMessage_ViewChangeRepair); ok {
		return x.ViewChangeRepair
	}
	return nil
}

func (m *ReplicaMessage) GetViewChangeRepairReply() *ViewChangeRepairReply {
	if x, ok := m.GetMessage().(*ReplicaMessage_ViewChangeRepairReply); ok {
		return x.ViewChangeRepairReply
	}
	return nil
}

func (m *ReplicaMessage) GetStartView() *StartView {
	if x, ok := m.GetMessage().(*ReplicaMessage_StartView); ok {
		return x.StartView
	}
	return nil
}

func (m *ReplicaMessage) GetViewRepair() *ViewRepair {
	if x, ok := m.GetMessage().(*ReplicaMessage_ViewRepair); ok {
		return x.ViewRepair
	}
	return nil
}

func (m *ReplicaMessage) GetViewRepairReply() *ViewRepairReply {
	if x, ok := m.GetMessage().(*ReplicaMessage_ViewRepairReply); ok {
		return x.ViewRepairReply
	}
	return nil
}

func (m *ReplicaMessage) GetSyncPrepare() *SyncPrepare {
	if x, ok := m.GetMessage().(*ReplicaMessage_SyncPrepare); ok {
		return x.SyncPrepare
	}
	return nil
}

func (m *ReplicaMessage) GetSyncRepair() *SyncRepair {
	if x, ok := m.GetMessage().(*ReplicaMessage_SyncRepair); ok {
		return x.SyncRepair
	}
	return nil
}

func (m *ReplicaMessage) GetSyncRepairReply() *SyncRepairReply {
	if x, ok := m.GetMessage().(*ReplicaMessage_SyncRepairReply); ok {
		return x.SyncRepairReply
	}
	return nil
}

func (m *ReplicaMessage) GetSyncReply() *SyncReply {
	if x, ok := m.GetMessage().(*ReplicaMessage_SyncReply); ok {
		return x.SyncReply
	}
	return nil
}

func (m *ReplicaMessage) GetSyncCommit() *SyncCommit {
	if x, ok := m.GetMessage().(*ReplicaMessage_SyncCommit); ok {
		return x.SyncCommit
	}
	return nil
}

func (m *ReplicaMessage) GetPing() *Ping {
	if x, ok := m.GetMessage().(*ReplicaMessage_Ping); ok {
		return x.Ping
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplicaMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplicaMessage_Command)(nil),
		(*ReplicaMessage_CommandReply)(nil),
		(*ReplicaMessage_Query)(nil),
		(*ReplicaMessage_QueryReply)(nil),
		(*ReplicaMessage_SlotLookup)(nil),
		(*ReplicaMessage_GapCommit)(nil),
		(*ReplicaMessage_GapCommitReply)(nil),
		(*ReplicaMessage_ViewChangeRequest)(nil),
		(*ReplicaMessage_ViewChange)(nil),
		(*ReplicaMessage_ViewChangeRepair)(nil),
		(*ReplicaMessage_ViewChangeRepairReply)(nil),
		(*ReplicaMessage_StartView)(nil),
		(*ReplicaMessage_ViewRepair)(nil),
		(*ReplicaMessage_ViewRepairReply)(nil),
		(*ReplicaMessage_SyncPrepare)(nil),
		(*ReplicaMessage_SyncRepair)(nil),
		(*ReplicaMessage_SyncRepairReply)(nil),
		(*ReplicaMessage_SyncReply)(nil),
		(*ReplicaMessage_SyncCommit)(nil),
		(*ReplicaMessage_Ping)(nil),
	}
}

type ViewId struct {
	LeaderNum  LeaderID  `protobuf:"varint,1,opt,name=leader_num,json=leaderNum,proto3,casttype=LeaderID" json:"leader_num,omitempty"`
	SessionNum SessionID `protobuf:"varint,2,opt,name=session_num,json=sessionNum,proto3,casttype=SessionID" json:"session_num,omitempty"`
}

func (m *ViewId) Reset()         { *m = ViewId{} }
func (m *ViewId) String() string { return proto.CompactTextString(m) }
func (*ViewId) ProtoMessage()    {}
func (*ViewId) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{2}
}
func (m *ViewId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewId.Merge(m, src)
}
func (m *ViewId) XXX_Size() int {
	return m.Size()
}
func (m *ViewId) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewId.DiscardUnknown(m)
}

var xxx_messageInfo_ViewId proto.InternalMessageInfo

func (m *ViewId) GetLeaderNum() LeaderID {
	if m != nil {
		return m.LeaderNum
	}
	return 0
}

func (m *ViewId) GetSessionNum() SessionID {
	if m != nil {
		return m.SessionNum
	}
	return 0
}

type CommandRequest struct {
	SessionNum SessionID `protobuf:"varint,1,opt,name=session_num,json=sessionNum,proto3,casttype=SessionID" json:"session_num,omitempty"`
	MessageNum MessageID `protobuf:"varint,2,opt,name=message_num,json=messageNum,proto3,casttype=MessageID" json:"message_num,omitempty"`
	Timestamp  time.Time `protobuf:"bytes,3,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	Value      []byte    `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CommandRequest) Reset()         { *m = CommandRequest{} }
func (m *CommandRequest) String() string { return proto.CompactTextString(m) }
func (*CommandRequest) ProtoMessage()    {}
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{3}
}
func (m *CommandRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandRequest.Merge(m, src)
}
func (m *CommandRequest) XXX_Size() int {
	return m.Size()
}
func (m *CommandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommandRequest proto.InternalMessageInfo

func (m *CommandRequest) GetSessionNum() SessionID {
	if m != nil {
		return m.SessionNum
	}
	return 0
}

func (m *CommandRequest) GetMessageNum() MessageID {
	if m != nil {
		return m.MessageNum
	}
	return 0
}

func (m *CommandRequest) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *CommandRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type CommandReply struct {
	MessageNum MessageID `protobuf:"varint,1,opt,name=message_num,json=messageNum,proto3,casttype=MessageID" json:"message_num,omitempty"`
	Sender     MemberID  `protobuf:"bytes,2,opt,name=sender,proto3,casttype=MemberID" json:"sender,omitempty"`
	ViewID     *ViewId   `protobuf:"bytes,3,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	SlotNum    LogSlotID `protobuf:"varint,4,opt,name=slot_num,json=slotNum,proto3,casttype=LogSlotID" json:"slot_num,omitempty"`
	Value      []byte    `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CommandReply) Reset()         { *m = CommandReply{} }
func (m *CommandReply) String() string { return proto.CompactTextString(m) }
func (*CommandReply) ProtoMessage()    {}
func (*CommandReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{4}
}
func (m *CommandReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandReply.Merge(m, src)
}
func (m *CommandReply) XXX_Size() int {
	return m.Size()
}
func (m *CommandReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandReply.DiscardUnknown(m)
}

var xxx_messageInfo_CommandReply proto.InternalMessageInfo

func (m *CommandReply) GetMessageNum() MessageID {
	if m != nil {
		return m.MessageNum
	}
	return 0
}

func (m *CommandReply) GetSender() MemberID {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *CommandReply) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *CommandReply) GetSlotNum() LogSlotID {
	if m != nil {
		return m.SlotNum
	}
	return 0
}

func (m *CommandReply) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type QueryRequest struct {
	SessionNum SessionID `protobuf:"varint,1,opt,name=session_num,json=sessionNum,proto3,casttype=SessionID" json:"session_num,omitempty"`
	MessageNum MessageID `protobuf:"varint,2,opt,name=message_num,json=messageNum,proto3,casttype=MessageID" json:"message_num,omitempty"`
	Timestamp  time.Time `protobuf:"bytes,3,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	Value      []byte    `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *QueryRequest) Reset()         { *m = QueryRequest{} }
func (m *QueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()    {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{5}
}
func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(m, src)
}
func (m *QueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetSessionNum() SessionID {
	if m != nil {
		return m.SessionNum
	}
	return 0
}

func (m *QueryRequest) GetMessageNum() MessageID {
	if m != nil {
		return m.MessageNum
	}
	return 0
}

func (m *QueryRequest) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *QueryRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type QueryReply struct {
	MessageNum MessageID `protobuf:"varint,1,opt,name=message_num,json=messageNum,proto3,casttype=MessageID" json:"message_num,omitempty"`
	Sender     MemberID  `protobuf:"bytes,2,opt,name=sender,proto3,casttype=MemberID" json:"sender,omitempty"`
	ViewID     *ViewId   `protobuf:"bytes,3,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	Value      []byte    `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *QueryReply) Reset()         { *m = QueryReply{} }
func (m *QueryReply) String() string { return proto.CompactTextString(m) }
func (*QueryReply) ProtoMessage()    {}
func (*QueryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{6}
}
func (m *QueryReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReply.Merge(m, src)
}
func (m *QueryReply) XXX_Size() int {
	return m.Size()
}
func (m *QueryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReply.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReply proto.InternalMessageInfo

func (m *QueryReply) GetMessageNum() MessageID {
	if m != nil {
		return m.MessageNum
	}
	return 0
}

func (m *QueryReply) GetSender() MemberID {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *QueryReply) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *QueryReply) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type SlotLookup struct {
	Sender     MemberID  `protobuf:"bytes,1,opt,name=sender,proto3,casttype=MemberID" json:"sender,omitempty"`
	ViewID     *ViewId   `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	MessageNum MessageID `protobuf:"varint,3,opt,name=message_num,json=messageNum,proto3,casttype=MessageID" json:"message_num,omitempty"`
}

func (m *SlotLookup) Reset()         { *m = SlotLookup{} }
func (m *SlotLookup) String() string { return proto.CompactTextString(m) }
func (*SlotLookup) ProtoMessage()    {}
func (*SlotLookup) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{7}
}
func (m *SlotLookup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlotLookup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlotLookup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlotLookup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlotLookup.Merge(m, src)
}
func (m *SlotLookup) XXX_Size() int {
	return m.Size()
}
func (m *SlotLookup) XXX_DiscardUnknown() {
	xxx_messageInfo_SlotLookup.DiscardUnknown(m)
}

var xxx_messageInfo_SlotLookup proto.InternalMessageInfo

func (m *SlotLookup) GetSender() MemberID {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *SlotLookup) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *SlotLookup) GetMessageNum() MessageID {
	if m != nil {
		return m.MessageNum
	}
	return 0
}

type GapCommitRequest struct {
	Sender  MemberID  `protobuf:"bytes,1,opt,name=sender,proto3,casttype=MemberID" json:"sender,omitempty"`
	ViewID  *ViewId   `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	SlotNum LogSlotID `protobuf:"varint,3,opt,name=slot_num,json=slotNum,proto3,casttype=LogSlotID" json:"slot_num,omitempty"`
}

func (m *GapCommitRequest) Reset()         { *m = GapCommitRequest{} }
func (m *GapCommitRequest) String() string { return proto.CompactTextString(m) }
func (*GapCommitRequest) ProtoMessage()    {}
func (*GapCommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{8}
}
func (m *GapCommitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GapCommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GapCommitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GapCommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GapCommitRequest.Merge(m, src)
}
func (m *GapCommitRequest) XXX_Size() int {
	return m.Size()
}
func (m *GapCommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GapCommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GapCommitRequest proto.InternalMessageInfo

func (m *GapCommitRequest) GetSender() MemberID {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *GapCommitRequest) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *GapCommitRequest) GetSlotNum() LogSlotID {
	if m != nil {
		return m.SlotNum
	}
	return 0
}

type GapCommitReply struct {
	Sender  MemberID  `protobuf:"bytes,1,opt,name=sender,proto3,casttype=MemberID" json:"sender,omitempty"`
	ViewID  *ViewId   `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	SlotNum LogSlotID `protobuf:"varint,3,opt,name=slot_num,json=slotNum,proto3,casttype=LogSlotID" json:"slot_num,omitempty"`
}

func (m *GapCommitReply) Reset()         { *m = GapCommitReply{} }
func (m *GapCommitReply) String() string { return proto.CompactTextString(m) }
func (*GapCommitReply) ProtoMessage()    {}
func (*GapCommitReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{9}
}
func (m *GapCommitReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GapCommitReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GapCommitReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GapCommitReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GapCommitReply.Merge(m, src)
}
func (m *GapCommitReply) XXX_Size() int {
	return m.Size()
}
func (m *GapCommitReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GapCommitReply.DiscardUnknown(m)
}

var xxx_messageInfo_GapCommitReply proto.InternalMessageInfo

func (m *GapCommitReply) GetSender() MemberID {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *GapCommitReply) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *GapCommitReply) GetSlotNum() LogSlotID {
	if m != nil {
		return m.SlotNum
	}
	return 0
}

type ViewChangeRequest struct {
	Sender MemberID `protobuf:"bytes,1,opt,name=sender,proto3,casttype=MemberID" json:"sender,omitempty"`
	ViewID *ViewId  `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
}

func (m *ViewChangeRequest) Reset()         { *m = ViewChangeRequest{} }
func (m *ViewChangeRequest) String() string { return proto.CompactTextString(m) }
func (*ViewChangeRequest) ProtoMessage()    {}
func (*ViewChangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{10}
}
func (m *ViewChangeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewChangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewChangeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewChangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewChangeRequest.Merge(m, src)
}
func (m *ViewChangeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ViewChangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewChangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ViewChangeRequest proto.InternalMessageInfo

func (m *ViewChangeRequest) GetSender() MemberID {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *ViewChangeRequest) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

type ViewChange struct {
	Sender          MemberID  `protobuf:"bytes,1,opt,name=sender,proto3,casttype=MemberID" json:"sender,omitempty"`
	ViewID          *ViewId   `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	LastNormal      *ViewId   `protobuf:"bytes,3,opt,name=last_normal,json=lastNormal,proto3" json:"last_normal,omitempty"`
	MessageNum      MessageID `protobuf:"varint,4,opt,name=message_num,json=messageNum,proto3,casttype=MessageID" json:"message_num,omitempty"`
	NoOpFilter      []byte    `protobuf:"bytes,5,opt,name=no_op_filter,json=noOpFilter,proto3" json:"no_op_filter,omitempty"`
	FirstLogSlotNum LogSlotID `protobuf:"varint,6,opt,name=first_log_slot_num,json=firstLogSlotNum,proto3,casttype=LogSlotID" json:"first_log_slot_num,omitempty"`
	LastLogSlotNum  LogSlotID `protobuf:"varint,7,opt,name=last_log_slot_num,json=lastLogSlotNum,proto3,casttype=LogSlotID" json:"last_log_slot_num,omitempty"`
}

func (m *ViewChange) Reset()         { *m = ViewChange{} }
func (m *ViewChange) String() string { return proto.CompactTextString(m) }
func (*ViewChange) ProtoMessage()    {}
func (*ViewChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{11}
}
func (m *ViewChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewChange.Merge(m, src)
}
func (m *ViewChange) XXX_Size() int {
	return m.Size()
}
func (m *ViewChange) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewChange.DiscardUnknown(m)
}

var xxx_messageInfo_ViewChange proto.InternalMessageInfo

func (m *ViewChange) GetSender() MemberID {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *ViewChange) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *ViewChange) GetLastNormal() *ViewId {
	if m != nil {
		return m.LastNormal
	}
	return nil
}

func (m *ViewChange) GetMessageNum() MessageID {
	if m != nil {
		return m.MessageNum
	}
	return 0
}

func (m *ViewChange) GetNoOpFilter() []byte {
	if m != nil {
		return m.NoOpFilter
	}
	return nil
}

func (m *ViewChange) GetFirstLogSlotNum() LogSlotID {
	if m != nil {
		return m.FirstLogSlotNum
	}
	return 0
}

func (m *ViewChange) GetLastLogSlotNum() LogSlotID {
	if m != nil {
		return m.LastLogSlotNum
	}
	return 0
}

type ViewChangeRepair struct {
	Sender     MemberID    `protobuf:"bytes,1,opt,name=sender,proto3,casttype=MemberID" json:"sender,omitempty"`
	ViewID     *ViewId     `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	MessageNum MessageID   `protobuf:"varint,3,opt,name=message_num,json=messageNum,proto3,casttype=MessageID" json:"message_num,omitempty"`
	SlotNums   []LogSlotID `protobuf:"varint,4,rep,packed,name=slot_nums,json=slotNums,proto3,casttype=LogSlotID" json:"slot_nums,omitempty"`
}

func (m *ViewChangeRepair) Reset()         { *m = ViewChangeRepair{} }
func (m *ViewChangeRepair) String() string { return proto.CompactTextString(m) }
func (*ViewChangeRepair) ProtoMessage()    {}
func (*ViewChangeRepair) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{12}
}
func (m *ViewChangeRepair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewChangeRepair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewChangeRepair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewChangeRepair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewChangeRepair.Merge(m, src)
}
func (m *ViewChangeRepair) XXX_Size() int {
	return m.Size()
}
func (m *ViewChangeRepair) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewChangeRepair.DiscardUnknown(m)
}

var xxx_messageInfo_ViewChangeRepair proto.InternalMessageInfo

func (m *ViewChangeRepair) GetSender() MemberID {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *ViewChangeRepair) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *ViewChangeRepair) GetMessageNum() MessageID {
	if m != nil {
		return m.MessageNum
	}
	return 0
}

func (m *ViewChangeRepair) GetSlotNums() []LogSlotID {
	if m != nil {
		return m.SlotNums
	}
	return nil
}

type ViewChangeRepairReply struct {
	Sender     MemberID    `protobuf:"bytes,1,opt,name=sender,proto3,casttype=MemberID" json:"sender,omitempty"`
	ViewID     *ViewId     `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	MessageNum MessageID   `protobuf:"varint,3,opt,name=message_num,json=messageNum,proto3,casttype=MessageID" json:"message_num,omitempty"`
	SlotNums   []LogSlotID `protobuf:"varint,4,rep,packed,name=slot_nums,json=slotNums,proto3,casttype=LogSlotID" json:"slot_nums,omitempty"`
}

func (m *ViewChangeRepairReply) Reset()         { *m = ViewChangeRepairReply{} }
func (m *ViewChangeRepairReply) String() string { return proto.CompactTextString(m) }
func (*ViewChangeRepairReply) ProtoMessage()    {}
func (*ViewChangeRepairReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{13}
}
func (m *ViewChangeRepairReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewChangeRepairReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewChangeRepairReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewChangeRepairReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewChangeRepairReply.Merge(m, src)
}
func (m *ViewChangeRepairReply) XXX_Size() int {
	return m.Size()
}
func (m *ViewChangeRepairReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewChangeRepairReply.DiscardUnknown(m)
}

var xxx_messageInfo_ViewChangeRepairReply proto.InternalMessageInfo

func (m *ViewChangeRepairReply) GetSender() MemberID {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *ViewChangeRepairReply) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *ViewChangeRepairReply) GetMessageNum() MessageID {
	if m != nil {
		return m.MessageNum
	}
	return 0
}

func (m *ViewChangeRepairReply) GetSlotNums() []LogSlotID {
	if m != nil {
		return m.SlotNums
	}
	return nil
}

type StartView struct {
	Sender          MemberID  `protobuf:"bytes,1,opt,name=sender,proto3,casttype=MemberID" json:"sender,omitempty"`
	ViewID          *ViewId   `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	MessageNum      MessageID `protobuf:"varint,3,opt,name=message_num,json=messageNum,proto3,casttype=MessageID" json:"message_num,omitempty"`
	NoOpFilter      []byte    `protobuf:"bytes,4,opt,name=no_op_filter,json=noOpFilter,proto3" json:"no_op_filter,omitempty"`
	FirstLogSlotNum LogSlotID `protobuf:"varint,5,opt,name=first_log_slot_num,json=firstLogSlotNum,proto3,casttype=LogSlotID" json:"first_log_slot_num,omitempty"`
	LastLogSlotNum  LogSlotID `protobuf:"varint,6,opt,name=last_log_slot_num,json=lastLogSlotNum,proto3,casttype=LogSlotID" json:"last_log_slot_num,omitempty"`
}

func (m *StartView) Reset()         { *m = StartView{} }
func (m *StartView) String() string { return proto.CompactTextString(m) }
func (*StartView) ProtoMessage()    {}
func (*StartView) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{14}
}
func (m *StartView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartView.Merge(m, src)
}
func (m *StartView) XXX_Size() int {
	return m.Size()
}
func (m *StartView) XXX_DiscardUnknown() {
	xxx_messageInfo_StartView.DiscardUnknown(m)
}

var xxx_messageInfo_StartView proto.InternalMessageInfo

func (m *StartView) GetSender() MemberID {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *StartView) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *StartView) GetMessageNum() MessageID {
	if m != nil {
		return m.MessageNum
	}
	return 0
}

func (m *StartView) GetNoOpFilter() []byte {
	if m != nil {
		return m.NoOpFilter
	}
	return nil
}

func (m *StartView) GetFirstLogSlotNum() LogSlotID {
	if m != nil {
		return m.FirstLogSlotNum
	}
	return 0
}

func (m *StartView) GetLastLogSlotNum() LogSlotID {
	if m != nil {
		return m.LastLogSlotNum
	}
	return 0
}

type ViewRepair struct {
	Sender     MemberID    `protobuf:"bytes,1,opt,name=sender,proto3,casttype=MemberID" json:"sender,omitempty"`
	ViewID     *ViewId     `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	MessageNum MessageID   `protobuf:"varint,3,opt,name=message_num,json=messageNum,proto3,casttype=MessageID" json:"message_num,omitempty"`
	SlotNums   []LogSlotID `protobuf:"varint,4,rep,packed,name=slot_nums,json=slotNums,proto3,casttype=LogSlotID" json:"slot_nums,omitempty"`
}

func (m *ViewRepair) Reset()         { *m = ViewRepair{} }
func (m *ViewRepair) String() string { return proto.CompactTextString(m) }
func (*ViewRepair) ProtoMessage()    {}
func (*ViewRepair) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{15}
}
func (m *ViewRepair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewRepair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewRepair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewRepair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewRepair.Merge(m, src)
}
func (m *ViewRepair) XXX_Size() int {
	return m.Size()
}
func (m *ViewRepair) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewRepair.DiscardUnknown(m)
}

var xxx_messageInfo_ViewRepair proto.InternalMessageInfo

func (m *ViewRepair) GetSender() MemberID {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *ViewRepair) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *ViewRepair) GetMessageNum() MessageID {
	if m != nil {
		return m.MessageNum
	}
	return 0
}

func (m *ViewRepair) GetSlotNums() []LogSlotID {
	if m != nil {
		return m.SlotNums
	}
	return nil
}

type ViewRepairReply struct {
	Sender  MemberID    `protobuf:"bytes,1,opt,name=sender,proto3,casttype=MemberID" json:"sender,omitempty"`
	ViewID  *ViewId     `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	Entries []*LogEntry `protobuf:"bytes,3,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (m *ViewRepairReply) Reset()         { *m = ViewRepairReply{} }
func (m *ViewRepairReply) String() string { return proto.CompactTextString(m) }
func (*ViewRepairReply) ProtoMessage()    {}
func (*ViewRepairReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{16}
}
func (m *ViewRepairReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewRepairReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewRepairReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewRepairReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewRepairReply.Merge(m, src)
}
func (m *ViewRepairReply) XXX_Size() int {
	return m.Size()
}
func (m *ViewRepairReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewRepairReply.DiscardUnknown(m)
}

var xxx_messageInfo_ViewRepairReply proto.InternalMessageInfo

func (m *ViewRepairReply) GetSender() MemberID {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *ViewRepairReply) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *ViewRepairReply) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type SyncPrepare struct {
	Sender          MemberID  `protobuf:"bytes,1,opt,name=sender,proto3,casttype=MemberID" json:"sender,omitempty"`
	ViewID          *ViewId   `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	MessageNum      MessageID `protobuf:"varint,3,opt,name=message_num,json=messageNum,proto3,casttype=MessageID" json:"message_num,omitempty"`
	NoOpFilter      []byte    `protobuf:"bytes,4,opt,name=no_op_filter,json=noOpFilter,proto3" json:"no_op_filter,omitempty"`
	FirstLogSlotNum LogSlotID `protobuf:"varint,5,opt,name=first_log_slot_num,json=firstLogSlotNum,proto3,casttype=LogSlotID" json:"first_log_slot_num,omitempty"`
	LastLogSlotNum  LogSlotID `protobuf:"varint,6,opt,name=last_log_slot_num,json=lastLogSlotNum,proto3,casttype=LogSlotID" json:"last_log_slot_num,omitempty"`
}

func (m *SyncPrepare) Reset()         { *m = SyncPrepare{} }
func (m *SyncPrepare) String() string { return proto.CompactTextString(m) }
func (*SyncPrepare) ProtoMessage()    {}
func (*SyncPrepare) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{17}
}
func (m *SyncPrepare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncPrepare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncPrepare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncPrepare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncPrepare.Merge(m, src)
}
func (m *SyncPrepare) XXX_Size() int {
	return m.Size()
}
func (m *SyncPrepare) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncPrepare.DiscardUnknown(m)
}

var xxx_messageInfo_SyncPrepare proto.InternalMessageInfo

func (m *SyncPrepare) GetSender() MemberID {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *SyncPrepare) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *SyncPrepare) GetMessageNum() MessageID {
	if m != nil {
		return m.MessageNum
	}
	return 0
}

func (m *SyncPrepare) GetNoOpFilter() []byte {
	if m != nil {
		return m.NoOpFilter
	}
	return nil
}

func (m *SyncPrepare) GetFirstLogSlotNum() LogSlotID {
	if m != nil {
		return m.FirstLogSlotNum
	}
	return 0
}

func (m *SyncPrepare) GetLastLogSlotNum() LogSlotID {
	if m != nil {
		return m.LastLogSlotNum
	}
	return 0
}

type SyncRepair struct {
	Sender   MemberID    `protobuf:"bytes,1,opt,name=sender,proto3,casttype=MemberID" json:"sender,omitempty"`
	ViewID   *ViewId     `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	SlotNums []LogSlotID `protobuf:"varint,3,rep,packed,name=slot_nums,json=slotNums,proto3,casttype=LogSlotID" json:"slot_nums,omitempty"`
}

func (m *SyncRepair) Reset()         { *m = SyncRepair{} }
func (m *SyncRepair) String() string { return proto.CompactTextString(m) }
func (*SyncRepair) ProtoMessage()    {}
func (*SyncRepair) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{18}
}
func (m *SyncRepair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncRepair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncRepair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncRepair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRepair.Merge(m, src)
}
func (m *SyncRepair) XXX_Size() int {
	return m.Size()
}
func (m *SyncRepair) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRepair.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRepair proto.InternalMessageInfo

func (m *SyncRepair) GetSender() MemberID {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *SyncRepair) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *SyncRepair) GetSlotNums() []LogSlotID {
	if m != nil {
		return m.SlotNums
	}
	return nil
}

type SyncRepairReply struct {
	Sender  MemberID    `protobuf:"bytes,1,opt,name=sender,proto3,casttype=MemberID" json:"sender,omitempty"`
	ViewID  *ViewId     `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	Entries []*LogEntry `protobuf:"bytes,3,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (m *SyncRepairReply) Reset()         { *m = SyncRepairReply{} }
func (m *SyncRepairReply) String() string { return proto.CompactTextString(m) }
func (*SyncRepairReply) ProtoMessage()    {}
func (*SyncRepairReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{19}
}
func (m *SyncRepairReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncRepairReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncRepairReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncRepairReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRepairReply.Merge(m, src)
}
func (m *SyncRepairReply) XXX_Size() int {
	return m.Size()
}
func (m *SyncRepairReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRepairReply.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRepairReply proto.InternalMessageInfo

func (m *SyncRepairReply) GetSender() MemberID {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *SyncRepairReply) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *SyncRepairReply) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type SyncReply struct {
	Sender  MemberID  `protobuf:"bytes,1,opt,name=sender,proto3,casttype=MemberID" json:"sender,omitempty"`
	ViewID  *ViewId   `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	SlotNum LogSlotID `protobuf:"varint,3,opt,name=slot_num,json=slotNum,proto3,casttype=LogSlotID" json:"slot_num,omitempty"`
}

func (m *SyncReply) Reset()         { *m = SyncReply{} }
func (m *SyncReply) String() string { return proto.CompactTextString(m) }
func (*SyncReply) ProtoMessage()    {}
func (*SyncReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{20}
}
func (m *SyncReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncReply.Merge(m, src)
}
func (m *SyncReply) XXX_Size() int {
	return m.Size()
}
func (m *SyncReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncReply.DiscardUnknown(m)
}

var xxx_messageInfo_SyncReply proto.InternalMessageInfo

func (m *SyncReply) GetSender() MemberID {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *SyncReply) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *SyncReply) GetSlotNum() LogSlotID {
	if m != nil {
		return m.SlotNum
	}
	return 0
}

type SyncCommit struct {
	Sender     MemberID  `protobuf:"bytes,1,opt,name=sender,proto3,casttype=MemberID" json:"sender,omitempty"`
	ViewID     *ViewId   `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	MessageNum MessageID `protobuf:"varint,3,opt,name=message_num,json=messageNum,proto3,casttype=MessageID" json:"message_num,omitempty"`
	SyncPoint  LogSlotID `protobuf:"varint,4,opt,name=sync_point,json=syncPoint,proto3,casttype=LogSlotID" json:"sync_point,omitempty"`
}

func (m *SyncCommit) Reset()         { *m = SyncCommit{} }
func (m *SyncCommit) String() string { return proto.CompactTextString(m) }
func (*SyncCommit) ProtoMessage()    {}
func (*SyncCommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{21}
}
func (m *SyncCommit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncCommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncCommit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncCommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncCommit.Merge(m, src)
}
func (m *SyncCommit) XXX_Size() int {
	return m.Size()
}
func (m *SyncCommit) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncCommit.DiscardUnknown(m)
}

var xxx_messageInfo_SyncCommit proto.InternalMessageInfo

func (m *SyncCommit) GetSender() MemberID {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *SyncCommit) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func (m *SyncCommit) GetMessageNum() MessageID {
	if m != nil {
		return m.MessageNum
	}
	return 0
}

func (m *SyncCommit) GetSyncPoint() LogSlotID {
	if m != nil {
		return m.SyncPoint
	}
	return 0
}

type Ping struct {
	Sender MemberID `protobuf:"bytes,1,opt,name=sender,proto3,casttype=MemberID" json:"sender,omitempty"`
	ViewID *ViewId  `protobuf:"bytes,2,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bf22afbce485451, []int{22}
}
func (m *Ping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return m.Size()
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

func (m *Ping) GetSender() MemberID {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Ping) GetViewID() *ViewId {
	if m != nil {
		return m.ViewID
	}
	return nil
}

func init() {
	proto.RegisterType((*ClientMessage)(nil), "atomix.nopaxos.protocol.ClientMessage")
	proto.RegisterType((*ReplicaMessage)(nil), "atomix.nopaxos.protocol.ReplicaMessage")
	proto.RegisterType((*ViewId)(nil), "atomix.nopaxos.protocol.ViewId")
	proto.RegisterType((*CommandRequest)(nil), "atomix.nopaxos.protocol.CommandRequest")
	proto.RegisterType((*CommandReply)(nil), "atomix.nopaxos.protocol.CommandReply")
	proto.RegisterType((*QueryRequest)(nil), "atomix.nopaxos.protocol.QueryRequest")
	proto.RegisterType((*QueryReply)(nil), "atomix.nopaxos.protocol.QueryReply")
	proto.RegisterType((*SlotLookup)(nil), "atomix.nopaxos.protocol.SlotLookup")
	proto.RegisterType((*GapCommitRequest)(nil), "atomix.nopaxos.protocol.GapCommitRequest")
	proto.RegisterType((*GapCommitReply)(nil), "atomix.nopaxos.protocol.GapCommitReply")
	proto.RegisterType((*ViewChangeRequest)(nil), "atomix.nopaxos.protocol.ViewChangeRequest")
	proto.RegisterType((*ViewChange)(nil), "atomix.nopaxos.protocol.ViewChange")
	proto.RegisterType((*ViewChangeRepair)(nil), "atomix.nopaxos.protocol.ViewChangeRepair")
	proto.RegisterType((*ViewChangeRepairReply)(nil), "atomix.nopaxos.protocol.ViewChangeRepairReply")
	proto.RegisterType((*StartView)(nil), "atomix.nopaxos.protocol.StartView")
	proto.RegisterType((*ViewRepair)(nil), "atomix.nopaxos.protocol.ViewRepair")
	proto.RegisterType((*ViewRepairReply)(nil), "atomix.nopaxos.protocol.ViewRepairReply")
	proto.RegisterType((*SyncPrepare)(nil), "atomix.nopaxos.protocol.SyncPrepare")
	proto.RegisterType((*SyncRepair)(nil), "atomix.nopaxos.protocol.SyncRepair")
	proto.RegisterType((*SyncRepairReply)(nil), "atomix.nopaxos.protocol.SyncRepairReply")
	proto.RegisterType((*SyncReply)(nil), "atomix.nopaxos.protocol.SyncReply")
	proto.RegisterType((*SyncCommit)(nil), "atomix.nopaxos.protocol.SyncCommit")
	proto.RegisterType((*Ping)(nil), "atomix.nopaxos.protocol.Ping")
}

func init() {
	proto.RegisterFile("atomix/nopaxos/protocol/protocol.proto", fileDescriptor_5bf22afbce485451)
}

var fileDescriptor_5bf22afbce485451 = []byte{
	// 1295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xd8, 0x8e, 0x1d, 0x3f, 0x3b, 0x4e, 0xb2, 0x6d, 0xc5, 0x2a, 0x12, 0x76, 0x6a, 0x4a,
	0x09, 0x05, 0x39, 0x28, 0xbd, 0x20, 0x10, 0x12, 0xb2, 0x43, 0x89, 0x51, 0x5a, 0xc2, 0x06, 0x55,
	0x42, 0x42, 0x5a, 0x6d, 0xec, 0xe9, 0xb2, 0x62, 0x77, 0x67, 0xbb, 0xb3, 0x76, 0xeb, 0x13, 0x12,
	0x9f, 0xa0, 0x1f, 0x80, 0x0b, 0x12, 0x42, 0xfd, 0x00, 0x1c, 0x10, 0x07, 0x10, 0xb7, 0x88, 0x53,
	0x0f, 0x08, 0x21, 0x0e, 0x29, 0x38, 0x37, 0x3e, 0x01, 0xea, 0x09, 0xcd, 0xec, 0xec, 0x1f, 0x6f,
	0xec, 0xae, 0x95, 0x83, 0xe5, 0x56, 0xbd, 0xed, 0xbc, 0x79, 0xef, 0x37, 0xef, 0xf7, 0xe6, 0xbd,
	0x9d, 0x37, 0xbb, 0x70, 0x55, 0xf3, 0x88, 0x65, 0xdc, 0xdf, 0xb6, 0x89, 0xa3, 0xdd, 0x27, 0x74,
	0xdb, 0x71, 0x89, 0x47, 0xba, 0xc4, 0x0c, 0x1f, 0x9a, 0xfc, 0x41, 0x7a, 0xc9, 0xd7, 0x6b, 0x0a,
	0xbd, 0x66, 0x30, 0xbd, 0x71, 0x79, 0x1a, 0x80, 0x49, 0x74, 0x5f, 0x6b, 0xe3, 0xa2, 0x4e, 0x74,
	0xc2, 0x1f, 0xb7, 0xd9, 0x93, 0x90, 0xd6, 0x75, 0x42, 0x74, 0x13, 0xfb, 0x06, 0x47, 0xfd, 0x3b,
	0xdb, 0x9e, 0x61, 0x61, 0xea, 0x69, 0x96, 0xe3, 0x2b, 0x34, 0x7e, 0xc8, 0xc2, 0x4a, 0xdb, 0x34,
	0xb0, 0xed, 0xdd, 0xc4, 0x94, 0x6a, 0x3a, 0x96, 0xda, 0x50, 0xec, 0x12, 0xcb, 0xd2, 0xec, 0x9e,
	0x8c, 0x36, 0xd1, 0x56, 0x79, 0xe7, 0xb5, 0xe6, 0x14, 0xb7, 0x9a, 0x6d, 0x5f, 0x4f, 0xc1, 0x77,
	0xfb, 0x98, 0x7a, 0x7b, 0x19, 0x25, 0xb0, 0x94, 0xf6, 0x61, 0x45, 0x3c, 0xaa, 0x2e, 0x76, 0xcc,
	0xa1, 0x9c, 0xe5, 0x50, 0xaf, 0xa6, 0x43, 0x39, 0xe6, 0x70, 0x2f, 0xa3, 0x54, 0xba, 0xb1, 0xb1,
	0xf4, 0x1e, 0x2c, 0xdd, 0xed, 0x63, 0x77, 0x28, 0xe7, 0x52, 0x50, 0x3e, 0x61, 0x5a, 0x91, 0x3b,
	0xbe, 0x95, 0x74, 0x03, 0xca, 0xfc, 0x41, 0xb8, 0x92, 0xe7, 0x20, 0xaf, 0xa4, 0x81, 0xf8, 0x8e,
	0xc0, 0xdd, 0x70, 0xd4, 0x2a, 0x41, 0xd1, 0xf2, 0x83, 0xd4, 0xf8, 0xa6, 0x02, 0x55, 0x26, 0x34,
	0xba, 0xda, 0x8b, 0xb8, 0xa5, 0xc4, 0x8d, 0xe1, 0x50, 0x93, 0x78, 0xaa, 0x49, 0xc8, 0x97, 0x7d,
	0x47, 0x5e, 0x4a, 0xc1, 0x39, 0x34, 0x89, 0xb7, 0xcf, 0x55, 0x19, 0x0e, 0x0d, 0x47, 0xd2, 0x47,
	0x00, 0xba, 0xe6, 0xa8, 0x8c, 0xa2, 0xe1, 0xc9, 0x05, 0x0e, 0xf3, 0xfa, 0x54, 0x98, 0x0f, 0x35,
	0xa7, 0xcd, 0x35, 0x23, 0x5e, 0x25, 0x3d, 0x90, 0x49, 0x87, 0xb0, 0x16, 0x61, 0x09, 0x82, 0xc5,
	0x94, 0x6d, 0x8b, 0x21, 0xfa, 0x24, 0xab, 0xfa, 0x98, 0x44, 0xfa, 0x1c, 0x2e, 0x0c, 0x0c, 0x7c,
	0x4f, 0xed, 0x7e, 0xa1, 0xd9, 0x3a, 0x56, 0x5d, 0x7f, 0x61, 0x79, 0x99, 0xe3, 0x5e, 0x9b, 0x8a,
	0x7b, 0xdb, 0xc0, 0xf7, 0xda, 0xdc, 0x24, 0x72, 0x75, 0x7d, 0x90, 0x14, 0xb2, 0x30, 0xc6, 0xd0,
	0xe5, 0x52, 0x4a, 0x18, 0x23, 0x54, 0x16, 0xc6, 0x08, 0x4e, 0xfa, 0x0c, 0xa4, 0x71, 0x2f, 0x1d,
	0xcd, 0x70, 0x65, 0x48, 0x09, 0x67, 0xdc, 0x49, 0x66, 0xb0, 0x97, 0x51, 0xd6, 0x06, 0x09, 0x99,
	0x64, 0x80, 0x7c, 0x16, 0x5a, 0x44, 0xb7, 0xcc, 0x17, 0x68, 0xce, 0xbc, 0x40, 0x10, 0xe4, 0x4b,
	0x83, 0x49, 0x13, 0x52, 0x1b, 0x80, 0x7a, 0x9a, 0xeb, 0xa9, 0x6c, 0x5a, 0xae, 0x70, 0xf0, 0xc6,
	0xf4, 0x9c, 0x62, 0xaa, 0x6c, 0x05, 0x96, 0x05, 0x34, 0x18, 0x84, 0x21, 0x15, 0x31, 0x58, 0x99,
	0x21, 0xa4, 0x21, 0x7b, 0x1e, 0x52, 0xc1, 0xfb, 0x36, 0xac, 0xc7, 0x70, 0x04, 0xe1, 0x2a, 0x47,
	0xdb, 0x9a, 0x01, 0x2d, 0xa0, 0xba, 0x3a, 0x18, 0x17, 0x49, 0x1d, 0xa8, 0xd0, 0xa1, 0xdd, 0x55,
	0x1d, 0x06, 0xec, 0x62, 0x79, 0x95, 0x43, 0x5e, 0x99, 0x4e, 0x73, 0x68, 0x77, 0x0f, 0x7c, 0xdd,
	0xbd, 0x8c, 0x52, 0xa6, 0xd1, 0x90, 0x17, 0x21, 0x83, 0x12, 0x54, 0xd7, 0xd2, 0x8a, 0x70, 0x68,
	0x77, 0x23, 0xaa, 0x34, 0x1c, 0x31, 0xaa, 0x31, 0x1c, 0x41, 0x75, 0x3d, 0x85, 0x6a, 0x84, 0x16,
	0x52, 0xa5, 0xe3, 0x22, 0xbe, 0x9f, 0x02, 0xd7, 0x1c, 0xca, 0x52, 0xda, 0x7e, 0xfa, 0xd6, 0x1c,
	0xaa, 0x44, 0x83, 0x41, 0x48, 0x52, 0xbc, 0x22, 0x2e, 0xcc, 0x40, 0xd2, 0xaf, 0xdf, 0x80, 0xa4,
	0x78, 0x3b, 0x5c, 0x87, 0xbc, 0x63, 0xd8, 0xba, 0x7c, 0x91, 0x03, 0xbc, 0x3c, 0x15, 0xe0, 0xc0,
	0xb0, 0xf5, 0xbd, 0x8c, 0xc2, 0x95, 0xe3, 0xc7, 0x03, 0x86, 0x02, 0xdb, 0xdd, 0x4e, 0x4f, 0x7a,
	0x03, 0xc0, 0xc4, 0x5a, 0x0f, 0xbb, 0xaa, 0xdd, 0xb7, 0xf8, 0xc1, 0x90, 0x6f, 0x55, 0x9e, 0x9c,
	0xd4, 0x97, 0xf7, 0xb9, 0xb4, 0xb3, 0xab, 0x94, 0xfc, 0xf9, 0x5b, 0x7d, 0x4b, 0x6a, 0x42, 0x99,
	0x62, 0x4a, 0x0d, 0x62, 0x73, 0xed, 0x2c, 0xd7, 0x5e, 0x79, 0x72, 0x52, 0x2f, 0x1d, 0xfa, 0xe2,
	0xce, 0xae, 0x02, 0x42, 0xe3, 0x56, 0xdf, 0x6a, 0xfc, 0x86, 0xa0, 0x3a, 0x7e, 0x96, 0x24, 0x21,
	0x50, 0x0a, 0x04, 0xd3, 0x17, 0x4e, 0x27, 0x97, 0x14, 0xe7, 0x1a, 0xd3, 0x17, 0x1a, 0x4c, 0xbf,
	0x05, 0xa5, 0xb0, 0x85, 0x10, 0xc7, 0xca, 0x46, 0xd3, 0x6f, 0x32, 0x9a, 0x41, 0x93, 0xd1, 0xfc,
	0x34, 0xd0, 0x68, 0x2d, 0x1f, 0x9f, 0xd4, 0x33, 0x0f, 0x1e, 0xd7, 0x91, 0x12, 0x99, 0x49, 0x17,
	0x61, 0x69, 0xa0, 0x99, 0x7d, 0xcc, 0x4f, 0x94, 0x8a, 0xe2, 0x0f, 0x1a, 0xff, 0x22, 0xa8, 0xc4,
	0x4f, 0xb3, 0xa4, 0x6b, 0x28, 0xcd, 0xb5, 0x2b, 0x50, 0xa0, 0xd8, 0xee, 0x61, 0x97, 0xb3, 0x28,
	0xf9, 0x61, 0xbe, 0x89, 0xad, 0x23, 0x1e, 0x66, 0x31, 0x27, 0xed, 0x42, 0x91, 0x97, 0xaa, 0xd1,
	0x13, 0xee, 0xd7, 0x9f, 0x5a, 0xa0, 0x9d, 0x5e, 0x0b, 0x46, 0x27, 0x75, 0x7f, 0x3b, 0x77, 0x95,
	0xc2, 0xc0, 0xdf, 0xd6, 0x2d, 0x58, 0xe6, 0x47, 0x1a, 0x73, 0x2c, 0x1f, 0x39, 0xb6, 0x4f, 0x74,
	0x76, 0x7a, 0x75, 0x76, 0x95, 0x22, 0x9b, 0x66, 0x5e, 0x85, 0x64, 0x97, 0xe2, 0x64, 0x8f, 0x11,
	0x54, 0xe2, 0x87, 0xee, 0x33, 0xbc, 0x6f, 0x3f, 0x23, 0x80, 0xe8, 0xe8, 0x5f, 0xe8, 0x5d, 0x9b,
	0x4c, 0xe0, 0x21, 0x02, 0x88, 0x7a, 0x8e, 0x98, 0x43, 0x68, 0x36, 0x87, 0xb2, 0xe7, 0x77, 0x28,
	0x11, 0xac, 0x5c, 0x4a, 0xb0, 0x98, 0xab, 0x6b, 0xc9, 0xbe, 0x66, 0xae, 0x0e, 0xc7, 0xf3, 0x3e,
	0xf7, 0xb4, 0xbc, 0x6f, 0x7c, 0x8f, 0xa0, 0x3a, 0xde, 0x30, 0x2d, 0xa8, 0xa3, 0x5f, 0xc1, 0xfa,
	0x99, 0x06, 0x6c, 0x9e, 0xae, 0x36, 0xbe, 0xce, 0x01, 0x44, 0x1e, 0xcc, 0x35, 0x4a, 0xef, 0x43,
	0xd9, 0xd4, 0xa8, 0xa7, 0xda, 0xc4, 0xb5, 0x34, 0x73, 0xc6, 0xd2, 0x52, 0x80, 0xd9, 0xdc, 0xe2,
	0x26, 0xc9, 0x0c, 0xce, 0xa7, 0x95, 0xfb, 0x26, 0x54, 0x6c, 0xa2, 0x12, 0x47, 0xbd, 0x63, 0x98,
	0x1e, 0x76, 0xc5, 0x5b, 0x11, 0x6c, 0xf2, 0xb1, 0x73, 0x83, 0x4b, 0xa4, 0x77, 0x40, 0xba, 0x63,
	0xb8, 0x94, 0x5d, 0x17, 0x74, 0x35, 0xdc, 0xc3, 0xc2, 0xa4, 0x3d, 0x5c, 0xe5, 0x8a, 0x62, 0xcc,
	0xd0, 0xdf, 0x86, 0x75, 0xce, 0x67, 0xcc, 0xb4, 0x38, 0xc9, 0xb4, 0xca, 0xf4, 0x22, 0xcb, 0xc6,
	0x5f, 0x08, 0xd6, 0x92, 0x1d, 0xe8, 0x22, 0xbf, 0x0a, 0xa4, 0x6b, 0x50, 0x0a, 0x18, 0x52, 0x39,
	0xbf, 0x99, 0x3b, 0x4b, 0x71, 0x59, 0x64, 0x38, 0x6d, 0x3c, 0x46, 0x70, 0x69, 0x62, 0x7b, 0xfd,
	0xdc, 0x30, 0xfc, 0x25, 0x0b, 0xa5, 0xb0, 0xc7, 0x5f, 0x68, 0x56, 0xc9, 0x02, 0xc8, 0xcf, 0x58,
	0x00, 0x4b, 0xe7, 0x2f, 0x80, 0xc2, 0x2c, 0x05, 0xf0, 0x3b, 0xf2, 0xdf, 0x42, 0xcf, 0x59, 0xea,
	0xff, 0x84, 0x60, 0x35, 0x71, 0xd1, 0x9a, 0x2b, 0xb7, 0x77, 0xa1, 0x88, 0x6d, 0xcf, 0x35, 0x30,
	0x95, 0x73, 0x9b, 0xb9, 0xad, 0xf2, 0xce, 0xe5, 0xa9, 0x28, 0xfb, 0x44, 0xff, 0xc0, 0xf6, 0xdc,
	0xa1, 0x12, 0x58, 0x34, 0x7e, 0xcd, 0x42, 0x39, 0x76, 0xa5, 0x7b, 0x91, 0xd7, 0xe7, 0xc8, 0xeb,
	0xef, 0x58, 0x77, 0x17, 0x5d, 0x5f, 0xe7, 0x19, 0xc2, 0xb1, 0x3c, 0xcd, 0xa5, 0xe7, 0x69, 0xe2,
	0x96, 0xfc, 0xec, 0xe4, 0xe9, 0xb7, 0x08, 0x4a, 0xe1, 0x8d, 0x7c, 0x41, 0xdb, 0xbc, 0x3f, 0x44,
	0x1e, 0x88, 0x1b, 0xfe, 0x22, 0x97, 0xd2, 0x9b, 0xe2, 0x53, 0x88, 0x43, 0x0c, 0xdb, 0x9b, 0x7c,
	0xbd, 0xe4, 0xdf, 0x3c, 0x0e, 0xd8, 0x7c, 0xc3, 0x85, 0xfc, 0x81, 0x61, 0xeb, 0xf3, 0x64, 0xb4,
	0x43, 0x83, 0x9f, 0x06, 0x87, 0xd8, 0x1d, 0x18, 0x5d, 0x2c, 0x1d, 0x41, 0x45, 0x08, 0x3c, 0x17,
	0x6b, 0x96, 0x74, 0x75, 0xfa, 0x07, 0xeb, 0xf8, 0xcf, 0x86, 0x8d, 0x19, 0xf5, 0xb6, 0xd0, 0x5b,
	0x68, 0xe7, 0x5e, 0xf8, 0xc9, 0x3d, 0x58, 0x15, 0xc3, 0x4a, 0x20, 0xf1, 0x97, 0x9d, 0xfe, 0xed,
	0x76, 0xfc, 0x63, 0xfd, 0xc6, 0xac, 0x8a, 0x6c, 0xe1, 0xd6, 0x95, 0xff, 0xfe, 0xa9, 0xa1, 0x87,
	0xa3, 0x1a, 0xfa, 0x71, 0x54, 0x43, 0xc7, 0xa3, 0x1a, 0x7a, 0x34, 0xaa, 0xa1, 0xbf, 0x47, 0x35,
	0xf4, 0xe0, 0xb4, 0x96, 0x79, 0x74, 0x5a, 0xcb, 0xfc, 0x79, 0x5a, 0xcb, 0x1c, 0x15, 0x38, 0xc4,
	0xf5, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x85, 0x36, 0xbe, 0x3c, 0xed, 0x19, 0x00, 0x00,
}

func (this *ClientMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientMessage)
	if !ok {
		that2, ok := that.(ClientMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Message == nil {
		if this.Message != nil {
			return false
		}
	} else if this.Message == nil {
		return false
	} else if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *ClientMessage_Command) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientMessage_Command)
	if !ok {
		that2, ok := that.(ClientMessage_Command)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Command.Equal(that1.Command) {
		return false
	}
	return true
}
func (this *ClientMessage_CommandReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientMessage_CommandReply)
	if !ok {
		that2, ok := that.(ClientMessage_CommandReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CommandReply.Equal(that1.CommandReply) {
		return false
	}
	return true
}
func (this *ClientMessage_Query) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientMessage_Query)
	if !ok {
		that2, ok := that.(ClientMessage_Query)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Query.Equal(that1.Query) {
		return false
	}
	return true
}
func (this *ClientMessage_QueryReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientMessage_QueryReply)
	if !ok {
		that2, ok := that.(ClientMessage_QueryReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.QueryReply.Equal(that1.QueryReply) {
		return false
	}
	return true
}
func (this *ReplicaMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaMessage)
	if !ok {
		that2, ok := that.(ReplicaMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Message == nil {
		if this.Message != nil {
			return false
		}
	} else if this.Message == nil {
		return false
	} else if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *ReplicaMessage_Command) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaMessage_Command)
	if !ok {
		that2, ok := that.(ReplicaMessage_Command)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Command.Equal(that1.Command) {
		return false
	}
	return true
}
func (this *ReplicaMessage_CommandReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaMessage_CommandReply)
	if !ok {
		that2, ok := that.(ReplicaMessage_CommandReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CommandReply.Equal(that1.CommandReply) {
		return false
	}
	return true
}
func (this *ReplicaMessage_Query) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaMessage_Query)
	if !ok {
		that2, ok := that.(ReplicaMessage_Query)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Query.Equal(that1.Query) {
		return false
	}
	return true
}
func (this *ReplicaMessage_QueryReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaMessage_QueryReply)
	if !ok {
		that2, ok := that.(ReplicaMessage_QueryReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.QueryReply.Equal(that1.QueryReply) {
		return false
	}
	return true
}
func (this *ReplicaMessage_SlotLookup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaMessage_SlotLookup)
	if !ok {
		that2, ok := that.(ReplicaMessage_SlotLookup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SlotLookup.Equal(that1.SlotLookup) {
		return false
	}
	return true
}
func (this *ReplicaMessage_GapCommit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaMessage_GapCommit)
	if !ok {
		that2, ok := that.(ReplicaMessage_GapCommit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GapCommit.Equal(that1.GapCommit) {
		return false
	}
	return true
}
func (this *ReplicaMessage_GapCommitReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaMessage_GapCommitReply)
	if !ok {
		that2, ok := that.(ReplicaMessage_GapCommitReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GapCommitReply.Equal(that1.GapCommitReply) {
		return false
	}
	return true
}
func (this *ReplicaMessage_ViewChangeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaMessage_ViewChangeRequest)
	if !ok {
		that2, ok := that.(ReplicaMessage_ViewChangeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ViewChangeRequest.Equal(that1.ViewChangeRequest) {
		return false
	}
	return true
}
func (this *ReplicaMessage_ViewChange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaMessage_ViewChange)
	if !ok {
		that2, ok := that.(ReplicaMessage_ViewChange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ViewChange.Equal(that1.ViewChange) {
		return false
	}
	return true
}
func (this *ReplicaMessage_ViewChangeRepair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaMessage_ViewChangeRepair)
	if !ok {
		that2, ok := that.(ReplicaMessage_ViewChangeRepair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ViewChangeRepair.Equal(that1.ViewChangeRepair) {
		return false
	}
	return true
}
func (this *ReplicaMessage_ViewChangeRepairReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaMessage_ViewChangeRepairReply)
	if !ok {
		that2, ok := that.(ReplicaMessage_ViewChangeRepairReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ViewChangeRepairReply.Equal(that1.ViewChangeRepairReply) {
		return false
	}
	return true
}
func (this *ReplicaMessage_StartView) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaMessage_StartView)
	if !ok {
		that2, ok := that.(ReplicaMessage_StartView)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StartView.Equal(that1.StartView) {
		return false
	}
	return true
}
func (this *ReplicaMessage_ViewRepair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaMessage_ViewRepair)
	if !ok {
		that2, ok := that.(ReplicaMessage_ViewRepair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ViewRepair.Equal(that1.ViewRepair) {
		return false
	}
	return true
}
func (this *ReplicaMessage_ViewRepairReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaMessage_ViewRepairReply)
	if !ok {
		that2, ok := that.(ReplicaMessage_ViewRepairReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ViewRepairReply.Equal(that1.ViewRepairReply) {
		return false
	}
	return true
}
func (this *ReplicaMessage_SyncPrepare) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaMessage_SyncPrepare)
	if !ok {
		that2, ok := that.(ReplicaMessage_SyncPrepare)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SyncPrepare.Equal(that1.SyncPrepare) {
		return false
	}
	return true
}
func (this *ReplicaMessage_SyncRepair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaMessage_SyncRepair)
	if !ok {
		that2, ok := that.(ReplicaMessage_SyncRepair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SyncRepair.Equal(that1.SyncRepair) {
		return false
	}
	return true
}
func (this *ReplicaMessage_SyncRepairReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaMessage_SyncRepairReply)
	if !ok {
		that2, ok := that.(ReplicaMessage_SyncRepairReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SyncRepairReply.Equal(that1.SyncRepairReply) {
		return false
	}
	return true
}
func (this *ReplicaMessage_SyncReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaMessage_SyncReply)
	if !ok {
		that2, ok := that.(ReplicaMessage_SyncReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SyncReply.Equal(that1.SyncReply) {
		return false
	}
	return true
}
func (this *ReplicaMessage_SyncCommit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaMessage_SyncCommit)
	if !ok {
		that2, ok := that.(ReplicaMessage_SyncCommit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SyncCommit.Equal(that1.SyncCommit) {
		return false
	}
	return true
}
func (this *ReplicaMessage_Ping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaMessage_Ping)
	if !ok {
		that2, ok := that.(ReplicaMessage_Ping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ping.Equal(that1.Ping) {
		return false
	}
	return true
}
func (this *ViewId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ViewId)
	if !ok {
		that2, ok := that.(ViewId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LeaderNum != that1.LeaderNum {
		return false
	}
	if this.SessionNum != that1.SessionNum {
		return false
	}
	return true
}
func (this *CommandRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommandRequest)
	if !ok {
		that2, ok := that.(CommandRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SessionNum != that1.SessionNum {
		return false
	}
	if this.MessageNum != that1.MessageNum {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	return true
}
func (this *CommandReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommandReply)
	if !ok {
		that2, ok := that.(CommandReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MessageNum != that1.MessageNum {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if !this.ViewID.Equal(that1.ViewID) {
		return false
	}
	if this.SlotNum != that1.SlotNum {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	return true
}
func (this *QueryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryRequest)
	if !ok {
		that2, ok := that.(QueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SessionNum != that1.SessionNum {
		return false
	}
	if this.MessageNum != that1.MessageNum {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	return true
}
func (this *QueryReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryReply)
	if !ok {
		that2, ok := that.(QueryReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MessageNum != that1.MessageNum {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if !this.ViewID.Equal(that1.ViewID) {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	return true
}
func (this *SlotLookup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SlotLookup)
	if !ok {
		that2, ok := that.(SlotLookup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if !this.ViewID.Equal(that1.ViewID) {
		return false
	}
	if this.MessageNum != that1.MessageNum {
		return false
	}
	return true
}
func (this *GapCommitRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GapCommitRequest)
	if !ok {
		that2, ok := that.(GapCommitRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if !this.ViewID.Equal(that1.ViewID) {
		return false
	}
	if this.SlotNum != that1.SlotNum {
		return false
	}
	return true
}
func (this *GapCommitReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GapCommitReply)
	if !ok {
		that2, ok := that.(GapCommitReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if !this.ViewID.Equal(that1.ViewID) {
		return false
	}
	if this.SlotNum != that1.SlotNum {
		return false
	}
	return true
}
func (this *ViewChangeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ViewChangeRequest)
	if !ok {
		that2, ok := that.(ViewChangeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if !this.ViewID.Equal(that1.ViewID) {
		return false
	}
	return true
}
func (this *ViewChange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ViewChange)
	if !ok {
		that2, ok := that.(ViewChange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if !this.ViewID.Equal(that1.ViewID) {
		return false
	}
	if !this.LastNormal.Equal(that1.LastNormal) {
		return false
	}
	if this.MessageNum != that1.MessageNum {
		return false
	}
	if !bytes.Equal(this.NoOpFilter, that1.NoOpFilter) {
		return false
	}
	if this.FirstLogSlotNum != that1.FirstLogSlotNum {
		return false
	}
	if this.LastLogSlotNum != that1.LastLogSlotNum {
		return false
	}
	return true
}
func (this *ViewChangeRepair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ViewChangeRepair)
	if !ok {
		that2, ok := that.(ViewChangeRepair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if !this.ViewID.Equal(that1.ViewID) {
		return false
	}
	if this.MessageNum != that1.MessageNum {
		return false
	}
	if len(this.SlotNums) != len(that1.SlotNums) {
		return false
	}
	for i := range this.SlotNums {
		if this.SlotNums[i] != that1.SlotNums[i] {
			return false
		}
	}
	return true
}
func (this *ViewChangeRepairReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ViewChangeRepairReply)
	if !ok {
		that2, ok := that.(ViewChangeRepairReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if !this.ViewID.Equal(that1.ViewID) {
		return false
	}
	if this.MessageNum != that1.MessageNum {
		return false
	}
	if len(this.SlotNums) != len(that1.SlotNums) {
		return false
	}
	for i := range this.SlotNums {
		if this.SlotNums[i] != that1.SlotNums[i] {
			return false
		}
	}
	return true
}
func (this *StartView) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartView)
	if !ok {
		that2, ok := that.(StartView)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if !this.ViewID.Equal(that1.ViewID) {
		return false
	}
	if this.MessageNum != that1.MessageNum {
		return false
	}
	if !bytes.Equal(this.NoOpFilter, that1.NoOpFilter) {
		return false
	}
	if this.FirstLogSlotNum != that1.FirstLogSlotNum {
		return false
	}
	if this.LastLogSlotNum != that1.LastLogSlotNum {
		return false
	}
	return true
}
func (this *ViewRepair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ViewRepair)
	if !ok {
		that2, ok := that.(ViewRepair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if !this.ViewID.Equal(that1.ViewID) {
		return false
	}
	if this.MessageNum != that1.MessageNum {
		return false
	}
	if len(this.SlotNums) != len(that1.SlotNums) {
		return false
	}
	for i := range this.SlotNums {
		if this.SlotNums[i] != that1.SlotNums[i] {
			return false
		}
	}
	return true
}
func (this *ViewRepairReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ViewRepairReply)
	if !ok {
		that2, ok := that.(ViewRepairReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if !this.ViewID.Equal(that1.ViewID) {
		return false
	}
	if len(this.Entries) != len(that1.Entries) {
		return false
	}
	for i := range this.Entries {
		if !this.Entries[i].Equal(that1.Entries[i]) {
			return false
		}
	}
	return true
}
func (this *SyncPrepare) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncPrepare)
	if !ok {
		that2, ok := that.(SyncPrepare)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if !this.ViewID.Equal(that1.ViewID) {
		return false
	}
	if this.MessageNum != that1.MessageNum {
		return false
	}
	if !bytes.Equal(this.NoOpFilter, that1.NoOpFilter) {
		return false
	}
	if this.FirstLogSlotNum != that1.FirstLogSlotNum {
		return false
	}
	if this.LastLogSlotNum != that1.LastLogSlotNum {
		return false
	}
	return true
}
func (this *SyncRepair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncRepair)
	if !ok {
		that2, ok := that.(SyncRepair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if !this.ViewID.Equal(that1.ViewID) {
		return false
	}
	if len(this.SlotNums) != len(that1.SlotNums) {
		return false
	}
	for i := range this.SlotNums {
		if this.SlotNums[i] != that1.SlotNums[i] {
			return false
		}
	}
	return true
}
func (this *SyncRepairReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncRepairReply)
	if !ok {
		that2, ok := that.(SyncRepairReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if !this.ViewID.Equal(that1.ViewID) {
		return false
	}
	if len(this.Entries) != len(that1.Entries) {
		return false
	}
	for i := range this.Entries {
		if !this.Entries[i].Equal(that1.Entries[i]) {
			return false
		}
	}
	return true
}
func (this *SyncReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncReply)
	if !ok {
		that2, ok := that.(SyncReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if !this.ViewID.Equal(that1.ViewID) {
		return false
	}
	if this.SlotNum != that1.SlotNum {
		return false
	}
	return true
}
func (this *SyncCommit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncCommit)
	if !ok {
		that2, ok := that.(SyncCommit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if !this.ViewID.Equal(that1.ViewID) {
		return false
	}
	if this.MessageNum != that1.MessageNum {
		return false
	}
	if this.SyncPoint != that1.SyncPoint {
		return false
	}
	return true
}
func (this *Ping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ping)
	if !ok {
		that2, ok := that.(Ping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if !this.ViewID.Equal(that1.ViewID) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClientServiceClient is the client API for ClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientServiceClient interface {
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (ClientService_ClientStreamClient, error)
}

type clientServiceClient struct {
	cc *grpc.ClientConn
}

func NewClientServiceClient(cc *grpc.ClientConn) ClientServiceClient {
	return &clientServiceClient{cc}
}

func (c *clientServiceClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (ClientService_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ClientService_serviceDesc.Streams[0], "/atomix.nopaxos.protocol.ClientService/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientServiceClientStreamClient{stream}
	return x, nil
}

type ClientService_ClientStreamClient interface {
	Send(*ClientMessage) error
	Recv() (*ClientMessage, error)
	grpc.ClientStream
}

type clientServiceClientStreamClient struct {
	grpc.ClientStream
}

func (x *clientServiceClientStreamClient) Send(m *ClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientServiceClientStreamClient) Recv() (*ClientMessage, error) {
	m := new(ClientMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientServiceServer is the server API for ClientService service.
type ClientServiceServer interface {
	ClientStream(ClientService_ClientStreamServer) error
}

// UnimplementedClientServiceServer can be embedded to have forward compatible implementations.
type UnimplementedClientServiceServer struct {
}

func (*UnimplementedClientServiceServer) ClientStream(srv ClientService_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}

func RegisterClientServiceServer(s *grpc.Server, srv ClientServiceServer) {
	s.RegisterService(&_ClientService_serviceDesc, srv)
}

func _ClientService_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientServiceServer).ClientStream(&clientServiceClientStreamServer{stream})
}

type ClientService_ClientStreamServer interface {
	Send(*ClientMessage) error
	Recv() (*ClientMessage, error)
	grpc.ServerStream
}

type clientServiceClientStreamServer struct {
	grpc.ServerStream
}

func (x *clientServiceClientStreamServer) Send(m *ClientMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientServiceClientStreamServer) Recv() (*ClientMessage, error) {
	m := new(ClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ClientService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atomix.nopaxos.protocol.ClientService",
	HandlerType: (*ClientServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _ClientService_ClientStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "atomix/nopaxos/protocol/protocol.proto",
}

// ReplicaServiceClient is the client API for ReplicaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReplicaServiceClient interface {
	ReplicaStream(ctx context.Context, opts ...grpc.CallOption) (ReplicaService_ReplicaStreamClient, error)
}

type replicaServiceClient struct {
	cc *grpc.ClientConn
}

func NewReplicaServiceClient(cc *grpc.ClientConn) ReplicaServiceClient {
	return &replicaServiceClient{cc}
}

func (c *replicaServiceClient) ReplicaStream(ctx context.Context, opts ...grpc.CallOption) (ReplicaService_ReplicaStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ReplicaService_serviceDesc.Streams[0], "/atomix.nopaxos.protocol.ReplicaService/ReplicaStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicaServiceReplicaStreamClient{stream}
	return x, nil
}

type ReplicaService_ReplicaStreamClient interface {
	Send(*ReplicaMessage) error
	Recv() (*ReplicaMessage, error)
	grpc.ClientStream
}

type replicaServiceReplicaStreamClient struct {
	grpc.ClientStream
}

func (x *replicaServiceReplicaStreamClient) Send(m *ReplicaMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *replicaServiceReplicaStreamClient) Recv() (*ReplicaMessage, error) {
	m := new(ReplicaMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReplicaServiceServer is the server API for ReplicaService service.
type ReplicaServiceServer interface {
	ReplicaStream(ReplicaService_ReplicaStreamServer) error
}

// UnimplementedReplicaServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReplicaServiceServer struct {
}

func (*UnimplementedReplicaServiceServer) ReplicaStream(srv ReplicaService_ReplicaStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ReplicaStream not implemented")
}

func RegisterReplicaServiceServer(s *grpc.Server, srv ReplicaServiceServer) {
	s.RegisterService(&_ReplicaService_serviceDesc, srv)
}

func _ReplicaService_ReplicaStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReplicaServiceServer).ReplicaStream(&replicaServiceReplicaStreamServer{stream})
}

type ReplicaService_ReplicaStreamServer interface {
	Send(*ReplicaMessage) error
	Recv() (*ReplicaMessage, error)
	grpc.ServerStream
}

type replicaServiceReplicaStreamServer struct {
	grpc.ServerStream
}

func (x *replicaServiceReplicaStreamServer) Send(m *ReplicaMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *replicaServiceReplicaStreamServer) Recv() (*ReplicaMessage, error) {
	m := new(ReplicaMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ReplicaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atomix.nopaxos.protocol.ReplicaService",
	HandlerType: (*ReplicaServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReplicaStream",
			Handler:       _ReplicaService_ReplicaStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "atomix/nopaxos/protocol/protocol.proto",
}

func (m *ClientMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClientMessage_Command) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientMessage_Command) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ClientMessage_CommandReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientMessage_CommandReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CommandReply != nil {
		{
			size, err := m.CommandReply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ClientMessage_Query) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientMessage_Query) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ClientMessage_QueryReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientMessage_QueryReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.QueryReply != nil {
		{
			size, err := m.QueryReply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplicaMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicaMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplicaMessage_Command) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaMessage_Command) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ReplicaMessage_CommandReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaMessage_CommandReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CommandReply != nil {
		{
			size, err := m.CommandReply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ReplicaMessage_Query) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaMessage_Query) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplicaMessage_QueryReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaMessage_QueryReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.QueryReply != nil {
		{
			size, err := m.QueryReply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ReplicaMessage_SlotLookup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaMessage_SlotLookup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SlotLookup != nil {
		{
			size, err := m.SlotLookup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReplicaMessage_GapCommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaMessage_GapCommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GapCommit != nil {
		{
			size, err := m.GapCommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReplicaMessage_GapCommitReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaMessage_GapCommitReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GapCommitReply != nil {
		{
			size, err := m.GapCommitReply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ReplicaMessage_ViewChangeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaMessage_ViewChangeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ViewChangeRequest != nil {
		{
			size, err := m.ViewChangeRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ReplicaMessage_ViewChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaMessage_ViewChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ViewChange != nil {
		{
			size, err := m.ViewChange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ReplicaMessage_ViewChangeRepair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaMessage_ViewChangeRepair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ViewChangeRepair != nil {
		{
			size, err := m.ViewChangeRepair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ReplicaMessage_ViewChangeRepairReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaMessage_ViewChangeRepairReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ViewChangeRepairReply != nil {
		{
			size, err := m.ViewChangeRepairReply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *ReplicaMessage_StartView) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaMessage_StartView) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StartView != nil {
		{
			size, err := m.StartView.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *ReplicaMessage_ViewRepair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaMessage_ViewRepair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ViewRepair != nil {
		{
			size, err := m.ViewRepair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *ReplicaMessage_ViewRepairReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaMessage_ViewRepairReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ViewRepairReply != nil {
		{
			size, err := m.ViewRepairReply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *ReplicaMessage_SyncPrepare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaMessage_SyncPrepare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SyncPrepare != nil {
		{
			size, err := m.SyncPrepare.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *ReplicaMessage_SyncRepair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaMessage_SyncRepair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SyncRepair != nil {
		{
			size, err := m.SyncRepair.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ReplicaMessage_SyncRepairReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaMessage_SyncRepairReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SyncRepairReply != nil {
		{
			size, err := m.SyncRepairReply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *ReplicaMessage_SyncReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaMessage_SyncReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SyncReply != nil {
		{
			size, err := m.SyncReply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *ReplicaMessage_SyncCommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaMessage_SyncCommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SyncCommit != nil {
		{
			size, err := m.SyncCommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *ReplicaMessage_Ping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaMessage_Ping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ping != nil {
		{
			size, err := m.Ping.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ViewId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SessionNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.SessionNum))
		i--
		dAtA[i] = 0x10
	}
	if m.LeaderNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.LeaderNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommandRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	n25, err25 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err25 != nil {
		return 0, err25
	}
	i -= n25
	i = encodeVarintProtocol(dAtA, i, uint64(n25))
	i--
	dAtA[i] = 0x1a
	if m.MessageNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.MessageNum))
		i--
		dAtA[i] = 0x10
	}
	if m.SessionNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.SessionNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommandReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SlotNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.SlotNum))
		i--
		dAtA[i] = 0x20
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.MessageNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.MessageNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	n27, err27 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err27 != nil {
		return 0, err27
	}
	i -= n27
	i = encodeVarintProtocol(dAtA, i, uint64(n27))
	i--
	dAtA[i] = 0x1a
	if m.MessageNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.MessageNum))
		i--
		dAtA[i] = 0x10
	}
	if m.SessionNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.SessionNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.MessageNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.MessageNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SlotLookup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlotLookup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlotLookup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MessageNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.MessageNum))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GapCommitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GapCommitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GapCommitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SlotNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.SlotNum))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GapCommitReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GapCommitReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GapCommitReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SlotNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.SlotNum))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewChangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewChangeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewChangeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastLogSlotNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.LastLogSlotNum))
		i--
		dAtA[i] = 0x38
	}
	if m.FirstLogSlotNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.FirstLogSlotNum))
		i--
		dAtA[i] = 0x30
	}
	if len(m.NoOpFilter) > 0 {
		i -= len(m.NoOpFilter)
		copy(dAtA[i:], m.NoOpFilter)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.NoOpFilter)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MessageNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.MessageNum))
		i--
		dAtA[i] = 0x20
	}
	if m.LastNormal != nil {
		{
			size, err := m.LastNormal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewChangeRepair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewChangeRepair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewChangeRepair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SlotNums) > 0 {
		dAtA36 := make([]byte, len(m.SlotNums)*10)
		var j35 int
		for _, num := range m.SlotNums {
			for num >= 1<<7 {
				dAtA36[j35] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j35++
			}
			dAtA36[j35] = uint8(num)
			j35++
		}
		i -= j35
		copy(dAtA[i:], dAtA36[:j35])
		i = encodeVarintProtocol(dAtA, i, uint64(j35))
		i--
		dAtA[i] = 0x22
	}
	if m.MessageNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.MessageNum))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewChangeRepairReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewChangeRepairReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewChangeRepairReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SlotNums) > 0 {
		dAtA39 := make([]byte, len(m.SlotNums)*10)
		var j38 int
		for _, num := range m.SlotNums {
			for num >= 1<<7 {
				dAtA39[j38] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j38++
			}
			dAtA39[j38] = uint8(num)
			j38++
		}
		i -= j38
		copy(dAtA[i:], dAtA39[:j38])
		i = encodeVarintProtocol(dAtA, i, uint64(j38))
		i--
		dAtA[i] = 0x22
	}
	if m.MessageNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.MessageNum))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartView) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartView) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastLogSlotNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.LastLogSlotNum))
		i--
		dAtA[i] = 0x30
	}
	if m.FirstLogSlotNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.FirstLogSlotNum))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NoOpFilter) > 0 {
		i -= len(m.NoOpFilter)
		copy(dAtA[i:], m.NoOpFilter)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.NoOpFilter)))
		i--
		dAtA[i] = 0x22
	}
	if m.MessageNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.MessageNum))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewRepair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewRepair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewRepair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SlotNums) > 0 {
		dAtA43 := make([]byte, len(m.SlotNums)*10)
		var j42 int
		for _, num := range m.SlotNums {
			for num >= 1<<7 {
				dAtA43[j42] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j42++
			}
			dAtA43[j42] = uint8(num)
			j42++
		}
		i -= j42
		copy(dAtA[i:], dAtA43[:j42])
		i = encodeVarintProtocol(dAtA, i, uint64(j42))
		i--
		dAtA[i] = 0x22
	}
	if m.MessageNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.MessageNum))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewRepairReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewRepairReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewRepairReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocol(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncPrepare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncPrepare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncPrepare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastLogSlotNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.LastLogSlotNum))
		i--
		dAtA[i] = 0x30
	}
	if m.FirstLogSlotNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.FirstLogSlotNum))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NoOpFilter) > 0 {
		i -= len(m.NoOpFilter)
		copy(dAtA[i:], m.NoOpFilter)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.NoOpFilter)))
		i--
		dAtA[i] = 0x22
	}
	if m.MessageNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.MessageNum))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncRepair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncRepair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncRepair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SlotNums) > 0 {
		dAtA48 := make([]byte, len(m.SlotNums)*10)
		var j47 int
		for _, num := range m.SlotNums {
			for num >= 1<<7 {
				dAtA48[j47] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j47++
			}
			dAtA48[j47] = uint8(num)
			j47++
		}
		i -= j47
		copy(dAtA[i:], dAtA48[:j47])
		i = encodeVarintProtocol(dAtA, i, uint64(j47))
		i--
		dAtA[i] = 0x1a
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncRepairReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncRepairReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncRepairReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocol(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SlotNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.SlotNum))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncCommit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncCommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncCommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SyncPoint != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.SyncPoint))
		i--
		dAtA[i] = 0x20
	}
	if m.MessageNum != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.MessageNum))
		i--
		dAtA[i] = 0x18
	}
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Ping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ViewID != nil {
		{
			size, err := m.ViewID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProtocol(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtocol(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedClientMessage(r randyProtocol, easy bool) *ClientMessage {
	this := &ClientMessage{}
	oneofNumber_Message := []int32{1, 2, 3, 4}[r.Intn(4)]
	switch oneofNumber_Message {
	case 1:
		this.Message = NewPopulatedClientMessage_Command(r, easy)
	case 2:
		this.Message = NewPopulatedClientMessage_CommandReply(r, easy)
	case 3:
		this.Message = NewPopulatedClientMessage_Query(r, easy)
	case 4:
		this.Message = NewPopulatedClientMessage_QueryReply(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClientMessage_Command(r randyProtocol, easy bool) *ClientMessage_Command {
	this := &ClientMessage_Command{}
	this.Command = NewPopulatedCommandRequest(r, easy)
	return this
}
func NewPopulatedClientMessage_CommandReply(r randyProtocol, easy bool) *ClientMessage_CommandReply {
	this := &ClientMessage_CommandReply{}
	this.CommandReply = NewPopulatedCommandReply(r, easy)
	return this
}
func NewPopulatedClientMessage_Query(r randyProtocol, easy bool) *ClientMessage_Query {
	this := &ClientMessage_Query{}
	this.Query = NewPopulatedQueryRequest(r, easy)
	return this
}
func NewPopulatedClientMessage_QueryReply(r randyProtocol, easy bool) *ClientMessage_QueryReply {
	this := &ClientMessage_QueryReply{}
	this.QueryReply = NewPopulatedQueryReply(r, easy)
	return this
}
func NewPopulatedReplicaMessage(r randyProtocol, easy bool) *ReplicaMessage {
	this := &ReplicaMessage{}
	oneofNumber_Message := []int32{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}[r.Intn(20)]
	switch oneofNumber_Message {
	case 1:
		this.Message = NewPopulatedReplicaMessage_Command(r, easy)
	case 2:
		this.Message = NewPopulatedReplicaMessage_CommandReply(r, easy)
	case 3:
		this.Message = NewPopulatedReplicaMessage_Query(r, easy)
	case 4:
		this.Message = NewPopulatedReplicaMessage_QueryReply(r, easy)
	case 5:
		this.Message = NewPopulatedReplicaMessage_SlotLookup(r, easy)
	case 6:
		this.Message = NewPopulatedReplicaMessage_GapCommit(r, easy)
	case 7:
		this.Message = NewPopulatedReplicaMessage_GapCommitReply(r, easy)
	case 8:
		this.Message = NewPopulatedReplicaMessage_ViewChangeRequest(r, easy)
	case 9:
		this.Message = NewPopulatedReplicaMessage_ViewChange(r, easy)
	case 10:
		this.Message = NewPopulatedReplicaMessage_ViewChangeRepair(r, easy)
	case 11:
		this.Message = NewPopulatedReplicaMessage_ViewChangeRepairReply(r, easy)
	case 12:
		this.Message = NewPopulatedReplicaMessage_StartView(r, easy)
	case 13:
		this.Message = NewPopulatedReplicaMessage_ViewRepair(r, easy)
	case 14:
		this.Message = NewPopulatedReplicaMessage_ViewRepairReply(r, easy)
	case 15:
		this.Message = NewPopulatedReplicaMessage_SyncPrepare(r, easy)
	case 16:
		this.Message = NewPopulatedReplicaMessage_SyncRepair(r, easy)
	case 17:
		this.Message = NewPopulatedReplicaMessage_SyncRepairReply(r, easy)
	case 18:
		this.Message = NewPopulatedReplicaMessage_SyncReply(r, easy)
	case 19:
		this.Message = NewPopulatedReplicaMessage_SyncCommit(r, easy)
	case 20:
		this.Message = NewPopulatedReplicaMessage_Ping(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedReplicaMessage_Command(r randyProtocol, easy bool) *ReplicaMessage_Command {
	this := &ReplicaMessage_Command{}
	this.Command = NewPopulatedCommandRequest(r, easy)
	return this
}
func NewPopulatedReplicaMessage_CommandReply(r randyProtocol, easy bool) *ReplicaMessage_CommandReply {
	this := &ReplicaMessage_CommandReply{}
	this.CommandReply = NewPopulatedCommandReply(r, easy)
	return this
}
func NewPopulatedReplicaMessage_Query(r randyProtocol, easy bool) *ReplicaMessage_Query {
	this := &ReplicaMessage_Query{}
	this.Query = NewPopulatedQueryRequest(r, easy)
	return this
}
func NewPopulatedReplicaMessage_QueryReply(r randyProtocol, easy bool) *ReplicaMessage_QueryReply {
	this := &ReplicaMessage_QueryReply{}
	this.QueryReply = NewPopulatedQueryReply(r, easy)
	return this
}
func NewPopulatedReplicaMessage_SlotLookup(r randyProtocol, easy bool) *ReplicaMessage_SlotLookup {
	this := &ReplicaMessage_SlotLookup{}
	this.SlotLookup = NewPopulatedSlotLookup(r, easy)
	return this
}
func NewPopulatedReplicaMessage_GapCommit(r randyProtocol, easy bool) *ReplicaMessage_GapCommit {
	this := &ReplicaMessage_GapCommit{}
	this.GapCommit = NewPopulatedGapCommitRequest(r, easy)
	return this
}
func NewPopulatedReplicaMessage_GapCommitReply(r randyProtocol, easy bool) *ReplicaMessage_GapCommitReply {
	this := &ReplicaMessage_GapCommitReply{}
	this.GapCommitReply = NewPopulatedGapCommitReply(r, easy)
	return this
}
func NewPopulatedReplicaMessage_ViewChangeRequest(r randyProtocol, easy bool) *ReplicaMessage_ViewChangeRequest {
	this := &ReplicaMessage_ViewChangeRequest{}
	this.ViewChangeRequest = NewPopulatedViewChangeRequest(r, easy)
	return this
}
func NewPopulatedReplicaMessage_ViewChange(r randyProtocol, easy bool) *ReplicaMessage_ViewChange {
	this := &ReplicaMessage_ViewChange{}
	this.ViewChange = NewPopulatedViewChange(r, easy)
	return this
}
func NewPopulatedReplicaMessage_ViewChangeRepair(r randyProtocol, easy bool) *ReplicaMessage_ViewChangeRepair {
	this := &ReplicaMessage_ViewChangeRepair{}
	this.ViewChangeRepair = NewPopulatedViewChangeRepair(r, easy)
	return this
}
func NewPopulatedReplicaMessage_ViewChangeRepairReply(r randyProtocol, easy bool) *ReplicaMessage_ViewChangeRepairReply {
	this := &ReplicaMessage_ViewChangeRepairReply{}
	this.ViewChangeRepairReply = NewPopulatedViewChangeRepairReply(r, easy)
	return this
}
func NewPopulatedReplicaMessage_StartView(r randyProtocol, easy bool) *ReplicaMessage_StartView {
	this := &ReplicaMessage_StartView{}
	this.StartView = NewPopulatedStartView(r, easy)
	return this
}
func NewPopulatedReplicaMessage_ViewRepair(r randyProtocol, easy bool) *ReplicaMessage_ViewRepair {
	this := &ReplicaMessage_ViewRepair{}
	this.ViewRepair = NewPopulatedViewRepair(r, easy)
	return this
}
func NewPopulatedReplicaMessage_ViewRepairReply(r randyProtocol, easy bool) *ReplicaMessage_ViewRepairReply {
	this := &ReplicaMessage_ViewRepairReply{}
	this.ViewRepairReply = NewPopulatedViewRepairReply(r, easy)
	return this
}
func NewPopulatedReplicaMessage_SyncPrepare(r randyProtocol, easy bool) *ReplicaMessage_SyncPrepare {
	this := &ReplicaMessage_SyncPrepare{}
	this.SyncPrepare = NewPopulatedSyncPrepare(r, easy)
	return this
}
func NewPopulatedReplicaMessage_SyncRepair(r randyProtocol, easy bool) *ReplicaMessage_SyncRepair {
	this := &ReplicaMessage_SyncRepair{}
	this.SyncRepair = NewPopulatedSyncRepair(r, easy)
	return this
}
func NewPopulatedReplicaMessage_SyncRepairReply(r randyProtocol, easy bool) *ReplicaMessage_SyncRepairReply {
	this := &ReplicaMessage_SyncRepairReply{}
	this.SyncRepairReply = NewPopulatedSyncRepairReply(r, easy)
	return this
}
func NewPopulatedReplicaMessage_SyncReply(r randyProtocol, easy bool) *ReplicaMessage_SyncReply {
	this := &ReplicaMessage_SyncReply{}
	this.SyncReply = NewPopulatedSyncReply(r, easy)
	return this
}
func NewPopulatedReplicaMessage_SyncCommit(r randyProtocol, easy bool) *ReplicaMessage_SyncCommit {
	this := &ReplicaMessage_SyncCommit{}
	this.SyncCommit = NewPopulatedSyncCommit(r, easy)
	return this
}
func NewPopulatedReplicaMessage_Ping(r randyProtocol, easy bool) *ReplicaMessage_Ping {
	this := &ReplicaMessage_Ping{}
	this.Ping = NewPopulatedPing(r, easy)
	return this
}
func NewPopulatedViewId(r randyProtocol, easy bool) *ViewId {
	this := &ViewId{}
	this.LeaderNum = LeaderID(uint64(r.Uint32()))
	this.SessionNum = SessionID(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCommandRequest(r randyProtocol, easy bool) *CommandRequest {
	this := &CommandRequest{}
	this.SessionNum = SessionID(uint64(r.Uint32()))
	this.MessageNum = MessageID(uint64(r.Uint32()))
	v1 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.Timestamp = *v1
	v2 := r.Intn(100)
	this.Value = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Value[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCommandReply(r randyProtocol, easy bool) *CommandReply {
	this := &CommandReply{}
	this.MessageNum = MessageID(uint64(r.Uint32()))
	this.Sender = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewID = NewPopulatedViewId(r, easy)
	}
	this.SlotNum = LogSlotID(uint64(r.Uint32()))
	v3 := r.Intn(100)
	this.Value = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.Value[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedQueryRequest(r randyProtocol, easy bool) *QueryRequest {
	this := &QueryRequest{}
	this.SessionNum = SessionID(uint64(r.Uint32()))
	this.MessageNum = MessageID(uint64(r.Uint32()))
	v4 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.Timestamp = *v4
	v5 := r.Intn(100)
	this.Value = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.Value[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedQueryReply(r randyProtocol, easy bool) *QueryReply {
	this := &QueryReply{}
	this.MessageNum = MessageID(uint64(r.Uint32()))
	this.Sender = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewID = NewPopulatedViewId(r, easy)
	}
	v6 := r.Intn(100)
	this.Value = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.Value[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSlotLookup(r randyProtocol, easy bool) *SlotLookup {
	this := &SlotLookup{}
	this.Sender = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewID = NewPopulatedViewId(r, easy)
	}
	this.MessageNum = MessageID(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGapCommitRequest(r randyProtocol, easy bool) *GapCommitRequest {
	this := &GapCommitRequest{}
	this.Sender = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewID = NewPopulatedViewId(r, easy)
	}
	this.SlotNum = LogSlotID(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGapCommitReply(r randyProtocol, easy bool) *GapCommitReply {
	this := &GapCommitReply{}
	this.Sender = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewID = NewPopulatedViewId(r, easy)
	}
	this.SlotNum = LogSlotID(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedViewChangeRequest(r randyProtocol, easy bool) *ViewChangeRequest {
	this := &ViewChangeRequest{}
	this.Sender = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewID = NewPopulatedViewId(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedViewChange(r randyProtocol, easy bool) *ViewChange {
	this := &ViewChange{}
	this.Sender = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewID = NewPopulatedViewId(r, easy)
	}
	if r.Intn(5) != 0 {
		this.LastNormal = NewPopulatedViewId(r, easy)
	}
	this.MessageNum = MessageID(uint64(r.Uint32()))
	v7 := r.Intn(100)
	this.NoOpFilter = make([]byte, v7)
	for i := 0; i < v7; i++ {
		this.NoOpFilter[i] = byte(r.Intn(256))
	}
	this.FirstLogSlotNum = LogSlotID(uint64(r.Uint32()))
	this.LastLogSlotNum = LogSlotID(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedViewChangeRepair(r randyProtocol, easy bool) *ViewChangeRepair {
	this := &ViewChangeRepair{}
	this.Sender = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewID = NewPopulatedViewId(r, easy)
	}
	this.MessageNum = MessageID(uint64(r.Uint32()))
	v8 := r.Intn(10)
	this.SlotNums = make([]LogSlotID, v8)
	for i := 0; i < v8; i++ {
		this.SlotNums[i] = LogSlotID(uint64(r.Uint32()))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedViewChangeRepairReply(r randyProtocol, easy bool) *ViewChangeRepairReply {
	this := &ViewChangeRepairReply{}
	this.Sender = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewID = NewPopulatedViewId(r, easy)
	}
	this.MessageNum = MessageID(uint64(r.Uint32()))
	v9 := r.Intn(10)
	this.SlotNums = make([]LogSlotID, v9)
	for i := 0; i < v9; i++ {
		this.SlotNums[i] = LogSlotID(uint64(r.Uint32()))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStartView(r randyProtocol, easy bool) *StartView {
	this := &StartView{}
	this.Sender = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewID = NewPopulatedViewId(r, easy)
	}
	this.MessageNum = MessageID(uint64(r.Uint32()))
	v10 := r.Intn(100)
	this.NoOpFilter = make([]byte, v10)
	for i := 0; i < v10; i++ {
		this.NoOpFilter[i] = byte(r.Intn(256))
	}
	this.FirstLogSlotNum = LogSlotID(uint64(r.Uint32()))
	this.LastLogSlotNum = LogSlotID(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedViewRepair(r randyProtocol, easy bool) *ViewRepair {
	this := &ViewRepair{}
	this.Sender = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewID = NewPopulatedViewId(r, easy)
	}
	this.MessageNum = MessageID(uint64(r.Uint32()))
	v11 := r.Intn(10)
	this.SlotNums = make([]LogSlotID, v11)
	for i := 0; i < v11; i++ {
		this.SlotNums[i] = LogSlotID(uint64(r.Uint32()))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedViewRepairReply(r randyProtocol, easy bool) *ViewRepairReply {
	this := &ViewRepairReply{}
	this.Sender = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewID = NewPopulatedViewId(r, easy)
	}
	if r.Intn(5) != 0 {
		v12 := r.Intn(5)
		this.Entries = make([]*LogEntry, v12)
		for i := 0; i < v12; i++ {
			this.Entries[i] = NewPopulatedLogEntry(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSyncPrepare(r randyProtocol, easy bool) *SyncPrepare {
	this := &SyncPrepare{}
	this.Sender = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewID = NewPopulatedViewId(r, easy)
	}
	this.MessageNum = MessageID(uint64(r.Uint32()))
	v13 := r.Intn(100)
	this.NoOpFilter = make([]byte, v13)
	for i := 0; i < v13; i++ {
		this.NoOpFilter[i] = byte(r.Intn(256))
	}
	this.FirstLogSlotNum = LogSlotID(uint64(r.Uint32()))
	this.LastLogSlotNum = LogSlotID(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSyncRepair(r randyProtocol, easy bool) *SyncRepair {
	this := &SyncRepair{}
	this.Sender = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewID = NewPopulatedViewId(r, easy)
	}
	v14 := r.Intn(10)
	this.SlotNums = make([]LogSlotID, v14)
	for i := 0; i < v14; i++ {
		this.SlotNums[i] = LogSlotID(uint64(r.Uint32()))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSyncRepairReply(r randyProtocol, easy bool) *SyncRepairReply {
	this := &SyncRepairReply{}
	this.Sender = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewID = NewPopulatedViewId(r, easy)
	}
	if r.Intn(5) != 0 {
		v15 := r.Intn(5)
		this.Entries = make([]*LogEntry, v15)
		for i := 0; i < v15; i++ {
			this.Entries[i] = NewPopulatedLogEntry(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSyncReply(r randyProtocol, easy bool) *SyncReply {
	this := &SyncReply{}
	this.Sender = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewID = NewPopulatedViewId(r, easy)
	}
	this.SlotNum = LogSlotID(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSyncCommit(r randyProtocol, easy bool) *SyncCommit {
	this := &SyncCommit{}
	this.Sender = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewID = NewPopulatedViewId(r, easy)
	}
	this.MessageNum = MessageID(uint64(r.Uint32()))
	this.SyncPoint = LogSlotID(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPing(r randyProtocol, easy bool) *Ping {
	this := &Ping{}
	this.Sender = MemberID(randStringProtocol(r))
	if r.Intn(5) != 0 {
		this.ViewID = NewPopulatedViewId(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyProtocol interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneProtocol(r randyProtocol) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringProtocol(r randyProtocol) string {
	v16 := r.Intn(100)
	tmps := make([]rune, v16)
	for i := 0; i < v16; i++ {
		tmps[i] = randUTF8RuneProtocol(r)
	}
	return string(tmps)
}
func randUnrecognizedProtocol(r randyProtocol, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldProtocol(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldProtocol(dAtA []byte, r randyProtocol, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateProtocol(dAtA, uint64(key))
		v17 := r.Int63()
		if r.Intn(2) == 0 {
			v17 *= -1
		}
		dAtA = encodeVarintPopulateProtocol(dAtA, uint64(v17))
	case 1:
		dAtA = encodeVarintPopulateProtocol(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateProtocol(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateProtocol(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateProtocol(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateProtocol(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ClientMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		n += m.Message.Size()
	}
	return n
}

func (m *ClientMessage_Command) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ClientMessage_CommandReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommandReply != nil {
		l = m.CommandReply.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ClientMessage_Query) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ClientMessage_QueryReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryReply != nil {
		l = m.QueryReply.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ReplicaMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		n += m.Message.Size()
	}
	return n
}

func (m *ReplicaMessage_Command) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ReplicaMessage_CommandReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommandReply != nil {
		l = m.CommandReply.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ReplicaMessage_Query) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ReplicaMessage_QueryReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryReply != nil {
		l = m.QueryReply.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ReplicaMessage_SlotLookup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlotLookup != nil {
		l = m.SlotLookup.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ReplicaMessage_GapCommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GapCommit != nil {
		l = m.GapCommit.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ReplicaMessage_GapCommitReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GapCommitReply != nil {
		l = m.GapCommitReply.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ReplicaMessage_ViewChangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViewChangeRequest != nil {
		l = m.ViewChangeRequest.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ReplicaMessage_ViewChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViewChange != nil {
		l = m.ViewChange.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ReplicaMessage_ViewChangeRepair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViewChangeRepair != nil {
		l = m.ViewChangeRepair.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ReplicaMessage_ViewChangeRepairReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViewChangeRepairReply != nil {
		l = m.ViewChangeRepairReply.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ReplicaMessage_StartView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartView != nil {
		l = m.StartView.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ReplicaMessage_ViewRepair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViewRepair != nil {
		l = m.ViewRepair.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ReplicaMessage_ViewRepairReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViewRepairReply != nil {
		l = m.ViewRepairReply.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ReplicaMessage_SyncPrepare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SyncPrepare != nil {
		l = m.SyncPrepare.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ReplicaMessage_SyncRepair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SyncRepair != nil {
		l = m.SyncRepair.Size()
		n += 2 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ReplicaMessage_SyncRepairReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SyncRepairReply != nil {
		l = m.SyncRepairReply.Size()
		n += 2 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ReplicaMessage_SyncReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SyncReply != nil {
		l = m.SyncReply.Size()
		n += 2 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ReplicaMessage_SyncCommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SyncCommit != nil {
		l = m.SyncCommit.Size()
		n += 2 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ReplicaMessage_Ping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ping != nil {
		l = m.Ping.Size()
		n += 2 + l + sovProtocol(uint64(l))
	}
	return n
}
func (m *ViewId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeaderNum != 0 {
		n += 1 + sovProtocol(uint64(m.LeaderNum))
	}
	if m.SessionNum != 0 {
		n += 1 + sovProtocol(uint64(m.SessionNum))
	}
	return n
}

func (m *CommandRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionNum != 0 {
		n += 1 + sovProtocol(uint64(m.SessionNum))
	}
	if m.MessageNum != 0 {
		n += 1 + sovProtocol(uint64(m.MessageNum))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovProtocol(uint64(l))
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *CommandReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageNum != 0 {
		n += 1 + sovProtocol(uint64(m.MessageNum))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.SlotNum != 0 {
		n += 1 + sovProtocol(uint64(m.SlotNum))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *QueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionNum != 0 {
		n += 1 + sovProtocol(uint64(m.SessionNum))
	}
	if m.MessageNum != 0 {
		n += 1 + sovProtocol(uint64(m.MessageNum))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovProtocol(uint64(l))
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *QueryReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageNum != 0 {
		n += 1 + sovProtocol(uint64(m.MessageNum))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *SlotLookup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.MessageNum != 0 {
		n += 1 + sovProtocol(uint64(m.MessageNum))
	}
	return n
}

func (m *GapCommitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.SlotNum != 0 {
		n += 1 + sovProtocol(uint64(m.SlotNum))
	}
	return n
}

func (m *GapCommitReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.SlotNum != 0 {
		n += 1 + sovProtocol(uint64(m.SlotNum))
	}
	return n
}

func (m *ViewChangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *ViewChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.LastNormal != nil {
		l = m.LastNormal.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.MessageNum != 0 {
		n += 1 + sovProtocol(uint64(m.MessageNum))
	}
	l = len(m.NoOpFilter)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.FirstLogSlotNum != 0 {
		n += 1 + sovProtocol(uint64(m.FirstLogSlotNum))
	}
	if m.LastLogSlotNum != 0 {
		n += 1 + sovProtocol(uint64(m.LastLogSlotNum))
	}
	return n
}

func (m *ViewChangeRepair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.MessageNum != 0 {
		n += 1 + sovProtocol(uint64(m.MessageNum))
	}
	if len(m.SlotNums) > 0 {
		l = 0
		for _, e := range m.SlotNums {
			l += sovProtocol(uint64(e))
		}
		n += 1 + sovProtocol(uint64(l)) + l
	}
	return n
}

func (m *ViewChangeRepairReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.MessageNum != 0 {
		n += 1 + sovProtocol(uint64(m.MessageNum))
	}
	if len(m.SlotNums) > 0 {
		l = 0
		for _, e := range m.SlotNums {
			l += sovProtocol(uint64(e))
		}
		n += 1 + sovProtocol(uint64(l)) + l
	}
	return n
}

func (m *StartView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.MessageNum != 0 {
		n += 1 + sovProtocol(uint64(m.MessageNum))
	}
	l = len(m.NoOpFilter)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.FirstLogSlotNum != 0 {
		n += 1 + sovProtocol(uint64(m.FirstLogSlotNum))
	}
	if m.LastLogSlotNum != 0 {
		n += 1 + sovProtocol(uint64(m.LastLogSlotNum))
	}
	return n
}

func (m *ViewRepair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.MessageNum != 0 {
		n += 1 + sovProtocol(uint64(m.MessageNum))
	}
	if len(m.SlotNums) > 0 {
		l = 0
		for _, e := range m.SlotNums {
			l += sovProtocol(uint64(e))
		}
		n += 1 + sovProtocol(uint64(l)) + l
	}
	return n
}

func (m *ViewRepairReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovProtocol(uint64(l))
		}
	}
	return n
}

func (m *SyncPrepare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.MessageNum != 0 {
		n += 1 + sovProtocol(uint64(m.MessageNum))
	}
	l = len(m.NoOpFilter)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.FirstLogSlotNum != 0 {
		n += 1 + sovProtocol(uint64(m.FirstLogSlotNum))
	}
	if m.LastLogSlotNum != 0 {
		n += 1 + sovProtocol(uint64(m.LastLogSlotNum))
	}
	return n
}

func (m *SyncRepair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if len(m.SlotNums) > 0 {
		l = 0
		for _, e := range m.SlotNums {
			l += sovProtocol(uint64(e))
		}
		n += 1 + sovProtocol(uint64(l)) + l
	}
	return n
}

func (m *SyncRepairReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovProtocol(uint64(l))
		}
	}
	return n
}

func (m *SyncReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.SlotNum != 0 {
		n += 1 + sovProtocol(uint64(m.SlotNum))
	}
	return n
}

func (m *SyncCommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.MessageNum != 0 {
		n += 1 + sovProtocol(uint64(m.MessageNum))
	}
	if m.SyncPoint != 0 {
		n += 1 + sovProtocol(uint64(m.SyncPoint))
	}
	return n
}

func (m *Ping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.ViewID != nil {
		l = m.ViewID.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func sovProtocol(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtocol(x uint64) (n int) {
	return sovProtocol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClientMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CommandRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ClientMessage_Command{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandReply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CommandReply{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ClientMessage_CommandReply{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &QueryRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ClientMessage_Query{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryReply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &QueryReply{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ClientMessage_QueryReply{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicaMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicaMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicaMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CommandRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ReplicaMessage_Command{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandReply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CommandReply{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ReplicaMessage_CommandReply{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &QueryRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ReplicaMessage_Query{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryReply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &QueryReply{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ReplicaMessage_QueryReply{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotLookup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SlotLookup{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ReplicaMessage_SlotLookup{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GapCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GapCommitRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ReplicaMessage_GapCommit{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GapCommitReply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GapCommitReply{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ReplicaMessage_GapCommitReply{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewChangeRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewChangeRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ReplicaMessage_ViewChangeRequest{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewChange{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ReplicaMessage_ViewChange{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewChangeRepair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewChangeRepair{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ReplicaMessage_ViewChangeRepair{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewChangeRepairReply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewChangeRepairReply{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ReplicaMessage_ViewChangeRepairReply{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartView", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StartView{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ReplicaMessage_StartView{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewRepair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewRepair{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ReplicaMessage_ViewRepair{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewRepairReply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewRepairReply{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ReplicaMessage_ViewRepairReply{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncPrepare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyncPrepare{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ReplicaMessage_SyncPrepare{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncRepair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyncRepair{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ReplicaMessage_SyncRepair{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncRepairReply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyncRepairReply{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ReplicaMessage_SyncRepairReply{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncReply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyncReply{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ReplicaMessage_SyncReply{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyncCommit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ReplicaMessage_SyncCommit{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Ping{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &ReplicaMessage_Ping{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderNum", wireType)
			}
			m.LeaderNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderNum |= LeaderID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionNum", wireType)
			}
			m.SessionNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionNum |= SessionID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionNum", wireType)
			}
			m.SessionNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionNum |= SessionID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageNum", wireType)
			}
			m.MessageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageNum |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageNum", wireType)
			}
			m.MessageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageNum |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotNum", wireType)
			}
			m.SlotNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotNum |= LogSlotID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionNum", wireType)
			}
			m.SessionNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionNum |= SessionID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageNum", wireType)
			}
			m.MessageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageNum |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageNum", wireType)
			}
			m.MessageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageNum |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlotLookup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlotLookup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlotLookup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageNum", wireType)
			}
			m.MessageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageNum |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GapCommitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GapCommitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GapCommitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotNum", wireType)
			}
			m.SlotNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotNum |= LogSlotID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GapCommitReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GapCommitReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GapCommitReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotNum", wireType)
			}
			m.SlotNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotNum |= LogSlotID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewChangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewChangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewChangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastNormal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastNormal == nil {
				m.LastNormal = &ViewId{}
			}
			if err := m.LastNormal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageNum", wireType)
			}
			m.MessageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageNum |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOpFilter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoOpFilter = append(m.NoOpFilter[:0], dAtA[iNdEx:postIndex]...)
			if m.NoOpFilter == nil {
				m.NoOpFilter = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstLogSlotNum", wireType)
			}
			m.FirstLogSlotNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstLogSlotNum |= LogSlotID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLogSlotNum", wireType)
			}
			m.LastLogSlotNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastLogSlotNum |= LogSlotID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewChangeRepair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewChangeRepair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewChangeRepair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageNum", wireType)
			}
			m.MessageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageNum |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v LogSlotID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocol
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= LogSlotID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SlotNums = append(m.SlotNums, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocol
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocol
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocol
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SlotNums) == 0 {
					m.SlotNums = make([]LogSlotID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v LogSlotID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocol
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= LogSlotID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SlotNums = append(m.SlotNums, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotNums", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewChangeRepairReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewChangeRepairReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewChangeRepairReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageNum", wireType)
			}
			m.MessageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageNum |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v LogSlotID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocol
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= LogSlotID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SlotNums = append(m.SlotNums, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocol
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocol
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocol
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SlotNums) == 0 {
					m.SlotNums = make([]LogSlotID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v LogSlotID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocol
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= LogSlotID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SlotNums = append(m.SlotNums, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotNums", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageNum", wireType)
			}
			m.MessageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageNum |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOpFilter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoOpFilter = append(m.NoOpFilter[:0], dAtA[iNdEx:postIndex]...)
			if m.NoOpFilter == nil {
				m.NoOpFilter = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstLogSlotNum", wireType)
			}
			m.FirstLogSlotNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstLogSlotNum |= LogSlotID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLogSlotNum", wireType)
			}
			m.LastLogSlotNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastLogSlotNum |= LogSlotID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewRepair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewRepair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewRepair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageNum", wireType)
			}
			m.MessageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageNum |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v LogSlotID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocol
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= LogSlotID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SlotNums = append(m.SlotNums, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocol
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocol
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocol
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SlotNums) == 0 {
					m.SlotNums = make([]LogSlotID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v LogSlotID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocol
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= LogSlotID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SlotNums = append(m.SlotNums, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotNums", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewRepairReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewRepairReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewRepairReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &LogEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncPrepare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncPrepare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncPrepare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageNum", wireType)
			}
			m.MessageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageNum |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoOpFilter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoOpFilter = append(m.NoOpFilter[:0], dAtA[iNdEx:postIndex]...)
			if m.NoOpFilter == nil {
				m.NoOpFilter = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstLogSlotNum", wireType)
			}
			m.FirstLogSlotNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstLogSlotNum |= LogSlotID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLogSlotNum", wireType)
			}
			m.LastLogSlotNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastLogSlotNum |= LogSlotID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncRepair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncRepair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncRepair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v LogSlotID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocol
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= LogSlotID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SlotNums = append(m.SlotNums, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocol
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocol
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocol
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SlotNums) == 0 {
					m.SlotNums = make([]LogSlotID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v LogSlotID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocol
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= LogSlotID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SlotNums = append(m.SlotNums, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotNums", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncRepairReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncRepairReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncRepairReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &LogEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotNum", wireType)
			}
			m.SlotNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotNum |= LogSlotID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncCommit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncCommit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncCommit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageNum", wireType)
			}
			m.MessageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageNum |= MessageID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncPoint", wireType)
			}
			m.SyncPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncPoint |= LogSlotID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = MemberID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ViewID == nil {
				m.ViewID = &ViewId{}
			}
			if err := m.ViewID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtocol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtocol
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtocol
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtocol
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtocol        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtocol          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtocol = fmt.Errorf("proto: unexpected end of group")
)
