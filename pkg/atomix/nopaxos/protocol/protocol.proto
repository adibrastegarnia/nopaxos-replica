/*
Copyright 2019-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.nopaxos.protocol;

import "atomix/nopaxos/protocol/log.proto";
import "gogoproto/gogo.proto";

option (gogoproto.testgen_all) = true;
option (gogoproto.populate_all) = true;
option (gogoproto.equal_all) = true;

message Message {
    oneof message {
        CommandRequest command = 1;
        CommandReply command_reply = 2;
        QueryRequest query = 3;
        QueryReply query_reply = 4;
        SlotLookup slot_lookup = 5;
        GapCommitRequest gap_commit = 6;
        GapCommitReply gap_commit_reply = 7;
        ViewChangeRequest view_change_request = 8;
        ViewChange view_change = 9;
        StartView start_view = 10;
        SyncPrepare sync_prepare = 11;
        SyncReply sync_reply = 12;
        SyncCommit sync_commit = 13;
    }
}

message ViewId {
    string leader_id = 1 [(gogoproto.casttype) = "LeaderID"];
    uint64 session_id = 2 [(gogoproto.casttype) = "SessionID"];
}

message CommandRequest {
    uint64 session_id = 1 [(gogoproto.casttype) = "SessionID"];
    uint64 message_id = 2 [(gogoproto.casttype) = "MessageID"];
    bytes value = 3;
}

message CommandReply {
    string sender_id = 1 [(gogoproto.casttype) = "MemberID"];
    ViewId view_id = 2;
    uint64 slot_id = 3 [(gogoproto.casttype) = "LogSlotID"];
    bytes value = 4;
}

message QueryRequest {
    uint64 session_id = 1 [(gogoproto.casttype) = "SessionID"];
    bytes value = 2;
}

message QueryReply {
    string sender_id = 1 [(gogoproto.casttype) = "MemberID"];
    ViewId view_id = 2;
    bytes value = 3;
}

message SlotLookup {
    string sender_id = 1 [(gogoproto.casttype) = "MemberID"];
    ViewId view_id = 2;
    uint64 message_id = 3 [(gogoproto.casttype) = "MessageID"];
}

message GapCommitRequest {
    ViewId view_id = 1;
    uint64 slot_id = 2 [(gogoproto.casttype) = "LogSlotID"];
}

message GapCommitReply {
    string sender_id = 1 [(gogoproto.casttype) = "MemberID"];
    ViewId view_id = 2;
    uint64 slot_id = 3 [(gogoproto.casttype) = "LogSlotID"];
}

message ViewChangeRequest {
    ViewId view_id = 1;
}

message ViewChange {
    string member_id = 1 [(gogoproto.casttype) = "MemberID"];
    ViewId view_id = 2;
    ViewId last_normal = 3;
    uint64 message_id = 4 [(gogoproto.casttype) = "MessageID"];
    repeated LogEntry log = 5;
}

message StartView {
    ViewId view_id = 1;
    uint64 message_id = 2 [(gogoproto.casttype) = "MessageID"];
    repeated LogEntry log = 3;
}

message SyncPrepare {
    string sender_id = 1 [(gogoproto.casttype) = "MemberID"];
    ViewId view_id = 2;
    uint64 message_id = 3 [(gogoproto.casttype) = "MessageID"];
    repeated LogEntry log = 4;
}

message SyncReply {
    string sender_id = 1 [(gogoproto.casttype) = "MemberID"];
    ViewId view_id = 2;
    uint64 slot_id = 3 [(gogoproto.casttype) = "LogSlotID"];
}

message SyncCommit {
    string sender_id = 1 [(gogoproto.casttype) = "MemberID"];
    ViewId view_id = 2;
    uint64 message_id = 3 [(gogoproto.casttype) = "MessageID"];
    repeated LogEntry log = 4;
}

service NOPaxosService {
    rpc Stream(stream Message) returns (stream Message);
}
