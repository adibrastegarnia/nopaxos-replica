// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/nopaxos/store/snapshot/snapshot.proto

package snapshot

import (
	fmt "fmt"
	github_com_atomix_atomix_nopaxos_node_pkg_atomix_nopaxos_protocol "github.com/atomix/atomix-nopaxos-node/pkg/atomix/nopaxos/protocol"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Snapshot descriptor
type Descriptor struct {
	SlotId    github_com_atomix_atomix_nopaxos_node_pkg_atomix_nopaxos_protocol.LogSlodID `protobuf:"varint,1,opt,name=slot_id,json=slotId,proto3,casttype=github.com/atomix/atomix-nopaxos-node/pkg/atomix/nopaxos/protocol.LogSlodID" json:"slot_id,omitempty"`
	Timestamp *time.Time                                                                  `protobuf:"bytes,2,opt,name=timestamp,proto3,stdtime" json:"timestamp,omitempty"`
}

func (m *Descriptor) Reset()         { *m = Descriptor{} }
func (m *Descriptor) String() string { return proto.CompactTextString(m) }
func (*Descriptor) ProtoMessage()    {}
func (*Descriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c027807ac5ae920, []int{0}
}
func (m *Descriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Descriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Descriptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Descriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Descriptor.Merge(m, src)
}
func (m *Descriptor) XXX_Size() int {
	return m.Size()
}
func (m *Descriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_Descriptor.DiscardUnknown(m)
}

var xxx_messageInfo_Descriptor proto.InternalMessageInfo

func (m *Descriptor) GetSlotId() github_com_atomix_atomix_nopaxos_node_pkg_atomix_nopaxos_protocol.LogSlodID {
	if m != nil {
		return m.SlotId
	}
	return 0
}

func (m *Descriptor) GetTimestamp() *time.Time {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func init() {
	proto.RegisterType((*Descriptor)(nil), "atomix.nopaxos.Descriptor")
}

func init() {
	proto.RegisterFile("atomix/nopaxos/store/snapshot/snapshot.proto", fileDescriptor_9c027807ac5ae920)
}

var fileDescriptor_9c027807ac5ae920 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x4f, 0xbd, 0x4a, 0xc3, 0x40,
	0x1c, 0xef, 0x5f, 0x4a, 0xc5, 0x08, 0x0e, 0xc1, 0xa1, 0x64, 0xb8, 0x14, 0x71, 0xe8, 0x60, 0xef,
	0x40, 0x77, 0x87, 0xd0, 0xa5, 0x28, 0x08, 0xd5, 0x5d, 0xf2, 0x71, 0x5e, 0x0e, 0x93, 0xfc, 0x8f,
	0xdc, 0x15, 0xfa, 0x18, 0x7d, 0x0c, 0x9f, 0x40, 0x7c, 0x04, 0xc7, 0x8e, 0x4e, 0x7e, 0x5c, 0x5e,
	0x42, 0x9c, 0xa4, 0xb9, 0xb4, 0x82, 0xd3, 0xfd, 0xb8, 0xff, 0xef, 0xd3, 0x3b, 0x8b, 0x0d, 0x96,
	0x72, 0xc9, 0x2a, 0x54, 0xf1, 0x12, 0x35, 0xd3, 0x06, 0x6b, 0xce, 0x74, 0x15, 0x2b, 0x9d, 0xa3,
	0xd9, 0x01, 0xaa, 0x6a, 0x34, 0xe8, 0x1f, 0x39, 0x36, 0xed, 0xd8, 0x41, 0x28, 0x10, 0x45, 0xc1,
	0x59, 0x7b, 0x4d, 0x16, 0x0f, 0xcc, 0xc8, 0x92, 0x6b, 0x13, 0x97, 0xca, 0x09, 0x82, 0x63, 0x81,
	0x02, 0x5b, 0xc8, 0x36, 0xc8, 0xfd, 0x9e, 0x3c, 0x83, 0xe7, 0x4d, 0xb9, 0x4e, 0x6b, 0xa9, 0x0c,
	0xd6, 0x7e, 0xee, 0xed, 0xeb, 0x02, 0xcd, 0xbd, 0xcc, 0x86, 0x30, 0x82, 0x71, 0x3f, 0xba, 0xf9,
	0x79, 0x0f, 0xaf, 0x84, 0x34, 0xf9, 0x22, 0xa1, 0x29, 0x96, 0xac, 0xeb, 0xe8, 0x9e, 0x49, 0x17,
	0x3e, 0xa9, 0x30, 0xe3, 0x4c, 0x3d, 0x0a, 0xf6, 0x6f, 0x42, 0x9b, 0x91, 0x62, 0x41, 0xaf, 0x51,
	0xdc, 0x16, 0x98, 0xcd, 0xa6, 0xf3, 0xc1, 0xc6, 0x7f, 0x96, 0xf9, 0x97, 0xde, 0xc1, 0xae, 0xe1,
	0x70, 0x6f, 0x04, 0xe3, 0xc3, 0xf3, 0x80, 0xba, 0x0d, 0x74, 0xbb, 0x81, 0xde, 0x6d, 0x19, 0x51,
	0x7f, 0xf5, 0x11, 0xc2, 0xfc, 0x4f, 0x12, 0x9d, 0x7e, 0x7f, 0x11, 0x78, 0xb2, 0x04, 0x5e, 0x2c,
	0x81, 0x57, 0x4b, 0x60, 0x6d, 0x09, 0x7c, 0x5a, 0x02, 0xab, 0x86, 0xf4, 0xd6, 0x0d, 0xe9, 0xbd,
	0x35, 0xa4, 0x97, 0x0c, 0x5a, 0xab, 0x8b, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5f, 0x4f, 0x21,
	0x3c, 0x5c, 0x01, 0x00, 0x00,
}

func (this *Descriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Descriptor)
	if !ok {
		that2, ok := that.(Descriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SlotId != that1.SlotId {
		return false
	}
	if that1.Timestamp == nil {
		if this.Timestamp != nil {
			return false
		}
	} else if !this.Timestamp.Equal(*that1.Timestamp) {
		return false
	}
	return true
}
func (m *Descriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Descriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Descriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Timestamp):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintSnapshot(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x12
	}
	if m.SlotId != 0 {
		i = encodeVarintSnapshot(dAtA, i, uint64(m.SlotId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSnapshot(dAtA []byte, offset int, v uint64) int {
	offset -= sovSnapshot(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedDescriptor(r randySnapshot, easy bool) *Descriptor {
	this := &Descriptor{}
	this.SlotId = github_com_atomix_atomix_nopaxos_node_pkg_atomix_nopaxos_protocol.LogSlodID(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		this.Timestamp = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randySnapshot interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneSnapshot(r randySnapshot) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringSnapshot(r randySnapshot) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneSnapshot(r)
	}
	return string(tmps)
}
func randUnrecognizedSnapshot(r randySnapshot, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldSnapshot(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldSnapshot(dAtA []byte, r randySnapshot, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateSnapshot(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateSnapshot(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateSnapshot(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateSnapshot(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateSnapshot(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateSnapshot(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateSnapshot(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Descriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlotId != 0 {
		n += 1 + sovSnapshot(uint64(m.SlotId))
	}
	if m.Timestamp != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Timestamp)
		n += 1 + l + sovSnapshot(uint64(l))
	}
	return n
}

func sovSnapshot(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSnapshot(x uint64) (n int) {
	return sovSnapshot(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Descriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Descriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Descriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotId", wireType)
			}
			m.SlotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotId |= github_com_atomix_atomix_nopaxos_node_pkg_atomix_nopaxos_protocol.LogSlodID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnapshot
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSnapshot(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSnapshot
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSnapshot
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSnapshot
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSnapshot        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSnapshot          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSnapshot = fmt.Errorf("proto: unexpected end of group")
)
